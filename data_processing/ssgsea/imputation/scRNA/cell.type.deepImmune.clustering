---
title: "Cell type specific runs"
output: html_notebook
---


## Create Seurat object

```{r}
library(Seurat)
library(dplyr)
# sco = readRDS("/liulab/asahu/data/ssgsea/xiaoman/getz/SKCM_ICB_SeuratObj.rds")
# sco.cell =  sco[,]
# sco <- RunUMAP(sco, dims = 1:10)
# DotPlot(sco)
#QC
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
sco = CreateSeuratObject(counts =t(icb.expression.matched), project = "nir", min.cells = 3, min.features = 200)
sco[["percent.mt"]] <- PercentageFeatureSet(sco, pattern = "^MT-")
VlnPlot(sco, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

# We filter cells that have unique feature counts over 2,500 or less than 200
# We filter cells that have >5% mitochondrial counts
 sco<- subset(sco, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
 sco[["RNA"]]@data =  log(sco[["RNA"]]@counts + 1)
 xx = log(as.matrix(sco[["RNA"]]@counts) +1)
 sco[["RNA"]]@data = xx
 
 # Identification of highly variable features 
 sco <- FindVariableFeatures(sco, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(sco), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(sco)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))

# Scaling the data
all.genes <- rownames(sco)
sco <- ScaleData(sco, features = all.genes)

# dimensionality reduction 
sco <- RunPCA(sco, features = VariableFeatures(object = sco))

#clustering 
sco <- FindNeighbors(sco, dims = 1:10)
sco <- FindClusters(sco, resolution = 0.5)

# UMAP
sco <- RunUMAP(sco, dims = 1:10)
dir.create("/liulab/asahu/data/ssgsea/xiaoman/getz/Seurat")
saveRDS(sco, file = "/liulab/asahu/data/ssgsea/xiaoman/getz/Seurat/seuratObj.rds")

# Finding differentially expressed features 
sco.markers <- FindAllMarkers(sco, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
sco.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)

## heatmap plot 
top10 <- sco.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
p = DoHeatmap(sco, features = top10$gene) + NoLegend()

```






## Cell type  clustering

```{r}
# library(avinash)
library(ggplot2)
cell.type.curr = "NaiveBcell"
tsne.dir = sprintf("%s/tsnes",cwd)
dir.create(tsne.dir)
output.inx=grep(pattern = ".output",colnames(icb.phenotype), value=T)
embedding.inx=grep(pattern = "embedding",colnames(icb.phenotype), value = T)
d1=icb.phenotype[,c(embedding.inx),with=F]
d2 = resp.matched[,.(V2, V5, V6,V7)]
setnames(d2, 1:4,c("sample.name", "patient.name", "response", "treatment"))
d3 = phenotype_sel.mod[,.(assign.ident.2)]
data_tsne.merge = as.data.frame(cbind(d3, d2, d1))
# data_tsne.merge[,embedding.inx]

cell.type.inx=which(data_tsne.merge$assign.ident.2==cell.type.curr)
data.curr = data_tsne.merge[cell.type.inx,]
# all.p = plotSNE(data = data.curr , col=embedding.inx, size = 2,do.discrete=F, title= sprintf("%s %s", cell.type.curr, "response"),
#                 color.col = "response", perplexity = 30, theta = 0, pca=TRUE, 
#                 filename=sprintf("%s/%s_%s_final.pdf", tsne.dir, cell.type.curr, "response"), max_iter=1000)


umap.all.p = plotUMAP(data = data.curr, col=embedding.inx, size=1.5, do.discrete=F, title= sprintf("%s %s", cell.type.curr, "response"),
                color.col = "response", 
                filename=sprintf("%s/%s_%s_umap.pdf", tsne.dir, cell.type.curr, "response"))



```
```{r}
print(all.p[[2]])
```




## Cluster based on tsne
```{r}
library(scater)
filename = sprintf("%s/%s_%s_umap_clustering.pdf", tsne.dir, cell.type.curr, "response")

data.tsne= as.data.frame(all.p[[1]]$Y)
data.exp = t(icb.expression.matched)
# # Defining clusters and markers:
library(scran)
data.DI = data_tsne.merge[locx,58:121]
# data.DI = data.tsne
snn.gr <- buildSNNGraph(t(data.DI))
data.tsne$clust1 = factor(igraph::cluster_walktrap(snn.gr)$membership)
data.tsne.dt = data.table(data.tsne)
data.summ = data.tsne.dt[,.(clust.m=median(V2)),by=clust1]
data.summ = data.summ[order(clust.m)]
data.summ$clust = seq(nrow(data.summ))
data.tsne$clust = as.factor(data.summ[match(data.tsne$clust1, clust1)]$clust)
data.tsne$cell_name = colnames(data.exp)[locx]
p=ggplot(data.tsne, aes(x=V1, y=V2)) +
  geom_point(size=2,aes(color=clust), alpha=0.8) +
  guides(colour=guide_legend(override.aes=list(size=4))) +
  xlab("Dim1") + ylab("Dim2") +
  # ggtitle(label = title) +
  theme_light(base_size=20) +
  theme(axis.text.x=element_blank(),
        axis.text.y=element_blank()) 
# if(!is.null(filename)) ggsave(file=filename, p)

print(p)
ggsave(file=filename, p)

```

## Cluster based on umap
```{r}
library(scater)
filename = sprintf("%s/%s_%s_tsne_clustering.pdf", tsne.dir, cell.type.curr, "response")

data.tsne= as.data.frame(umap.all.p[[1]]$embedding)
# colnames(data.tsne) =c("UMAP1", "UMAP2")
data.curr$UMAP1 = data.tsne$V1
data.curr$UMAP2 = data.tsne$V2
data.curr = data.table(data.curr)
# data.curr = data.curr[match(rownames(icb.expression.matched), sample.name)]
# # Defining clusters and markers:
library(scran)
embedding.mat  = data.curr[,.SD, .SDcols=names(data.curr) %like% "^embedding"]
data.DI = embedding.mat 
# data.DI = data.curr[[grep("^embedding", names(data.curr))]]
snn.gr <- buildSNNGraph(t(data.DI), k=15, d =64)
cluster1.igraph = factor(igraph::cluster_walktrap(snn.gr, steps = 10)$membership)
data.curr[,response.bin:=ifelse(response=="Responder",1,0)] 
data.summ = data.curr[,.(clust.m=mean(response.bin)),by=cluster1.igraph]
data.summ = data.summ[order(clust.m)]
data.summ$clust = seq(nrow(data.summ))
match.inx = match(cluster1.igraph, data.summ$cluster1.igraph)
data.curr$cluster = as.factor(data.summ[match.inx]$clust)
p=ggplot(data.curr, aes(x=UMAP1, y=UMAP2)) +
  geom_point(size=2,aes(color=cluster), alpha=0.8) +
  guides(colour=guide_legend(override.aes=list(size=4))) +
  xlab("Dim1") + ylab("Dim2") +
  # ggtitle(label = title) +
  theme_light(base_size=20) +
  scale_color_tableau() + 
  theme_classic() +
  theme(axis.text.x=element_blank(),
        axis.text.y=element_blank()) 
# if(!is.null(filename)) ggsave(file=filename, p)

print(p)
ggsave(file=filename, p)

```

## Cell cycle analysis

```{r}
cell.cycle = fread("/liulab/asahu/data/ssgsea/xiaoman/getz/Gad_cell_cycle_score.csv")
data.curr$cell.cycle = as.factor(cell.cycle[match(data.curr$sample.name, V1)]$Phase)
data.curr$G2M.Score = cell.cycle[match(data.curr$sample.name, V1)]$G2M.Score
data.curr$S.Score = cell.cycle[match(data.curr$sample.name, V1)]$S.Score
cell.cycle.monocyte = cell.cycle[match(data.tsne$sample.name, V1)]
p=ggplot(data.curr, aes(x=UMAP1, y=UMAP2)) +
  geom_point(size=1,aes(color=cell.cycle), alpha=0.7) +
  guides(colour=guide_legend(override.aes=list(size=4))) +
  xlab("Dim1") + ylab("Dim2") +
  # ggtitle(label = title) +
  theme_light(base_size=20) +
  scale_color_tableau() + 
  theme_classic() +
  theme(axis.text.x=element_blank(),
        axis.text.y=element_blank()) 
# if(!is.null(filename)) ggsave(file=filename, p)
print(p)
ggsave(sprintf("%s/umap_clustering_cell_cycle.pdf", tsne.dir),p)

# cell.cycle.monocyte = cell.cycle[match(data.tsne$sample.name, V1)]
# cell.cycle.monocyte$clust = data.tsne$clust
p=ggplot(cell.cycle.monocyte, aes(x=S.Score, y=G2M.Score)) +
  geom_point(size=2,aes(color=cluster), alpha=0.8) +
  guides(colour=guide_legend(override.aes=list(size=4))) +
  # xlab("Dim1") + ylab("Dim2") +
  # ggtitle(label = title) +
  theme_light(base_size=20) +
  theme(axis.text.x=element_blank(),
        axis.text.y=element_blank()) 
ggsave(sprintf("%s/umap_clustering_lustering_cell_cycle.pdf", tsne.dir),p)

```

## Diffusion map 

```{r}
library(destiny)
library(Biobase)
library(ggthemes)
library(scater)
set.seed(1234)
dm.obj= DiffusionMap(data.curr[,.SD, .SDcols=names(data.curr) %like% "^embedding"], density_norm=F, rotate = F)
data.curr$diffusionmap1 = eigenvectors(dm.obj)[, 1] 
data.curr$diffusionmap2 = eigenvectors(dm.obj)[, 2] 
p.dm1 = ggplot(data.curr, aes(x = diffusionmap1, y = diffusionmap2, colour = response)) +
    geom_point(alpha=0.7) + scale_color_tableau() + 
    xlab("Diffusion component 1") + 
    ylab("Diffusion component 2") +
    theme_classic()

ggsave(filename = sprintf("%s/%s_%s_diffusion.pdf", tsne.dir, cell.type.curr, "response"),p.dm1)

p.dm2 = ggplot(data.curr, aes(x = diffusionmap1, y = diffusionmap2, colour = cluster)) +
    geom_point() + 
    scale_color_tableau() + 
    xlab("Diffusion component 1") + 
    ylab("Diffusion component 2") +
    theme_classic()

ggsave(filename = sprintf("%s/%s_%s_diffusion_cluster.pdf", tsne.dir, cell.type.curr, "response"),p.dm1)

dp = DPT(dm.obj)
data.curr$dpt = dp$dpt
p.dm3 <- ggplot(data.curr, aes(x = diffusionmap1, y = diffusionmap2, colour = dpt)) +
  geom_point() + 
    xlab("Diffusion component 1") + 
    ylab("Diffusion component 2")+
    theme_classic()

library(cowplot)
p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p
```

## Slingshot 
Adopted from [Slingshot Vignette](https://bioconductor.org/packages/release/bioc/vignettes/slingshot/inst/doc/vignette.html)
```{r}
library(slingshot)
library(gam)
# ?sli ngshot
# slingshot.out = slingshot(embedding.mat, clusterLabels = data.curr$cluster,  reducedDim = 'PCA')
mat = as.matrix(embedding.mat)
rownames(mat) = data.curr$sample.name
sce = SingleCellExperiment(assays = list(tpm= t(mat)))
dm = cbind(DC1 = dm.obj$DC1, DC2 = dm.obj$DC2)
dm2 = eigenvectors(dm.obj)[, 1:2]
reducedDims(sce)= SimpleList(DiffMap = dm, DiffMap2 = dm2)
colData(sce)$graph = data.curr$cluster
slingshot.out = slingshot(sce, clusterLabels = "graph",  reducedDim = 'DiffMap2')

library(RColorBrewer)
colors <- colorRampPalette(brewer.pal(11,'Spectral'))(100)
plotcol <- colors[cut(slingshot.out$slingPseudotime_1, breaks=100)]

plot(reducedDims(slingshot.out)$DiffMap, col = as.factor(data.curr$response), pch=16, asp = 1)
lines(SlingshotDataSet(slingshot.out), lwd=2, col='black')

require(gam)
require(clusterExperiment)
t <- slingshot.out$slingPseudotime_1


# fit a GAM with a loess term for pseudotime
gam.pval <- apply(t(embedding.mat),1,function(z){
    d <- data.frame(z=z, t=t)
    tmp <- gam(z ~ lo(t), data=d)
    p <- summary(tmp)[4][[1]][1,5]
    p
})
## Loading required package: clusterExperiment
topgenes <- names(sort(gam.pval[gam.pval<1E-10], decreasing = FALSE))
heatdata <- assay(sce)[topgenes,order(t, na.last = NA)]
# rownames(heatdata) = 
heatclus <- slingshot.out$graph[order(t, na.last = NA)]
ce <- ClusterExperiment(heatdata, heatclus)
plotHeatmap(ce, clusterSamplesData = "orderSamplesValue",
    visualizeData = 'transformed')


library(ComplexHeatmap)
    Heatmap(heatdata, 
            name = "Embedding vs Phenotypes", #title of legend
            column_title = "Variables", row_title = "Samples",
            row_names_gp = gpar(fontsize = 7), # Text size for row names
            column_names_gp = gpar(fontsize = 6) # Text size for row names
    )

```

## Estimate the cell fraction in bulk tumor
1. Differential expression fold change. Choose genes to include in differential expression.
2. Calculate the fold change in the genetech data.
3. Calculate roc
4. Create function
5. Find alternative to etstimate cell fraction

```{r}

require(doMC)
require(foreach)
registerDoMC(cores = 8)


# 
# set1 = 1:2
# set2 = 3:6
# my.clusters = ifelse(data.curr$cluster %in% set2, 1,  NA) * data.curr$response.bin
# set1 =3 
# set2=6

sce = SingleCellExperiment(assays = list(tpm = t(icb.expression.matched[cell.type.inx,])))
ave.counts <- rowSums(tpm(sce)!=0)
keep <- ave.counts >= 2
sum(keep)
sce1 = sce[keep, ]
# sce1 = normalize(sce1)
logcounts(sce1) = log(tpm(sce1) +1)
genes2consider = intersect(rownames(sce1),  genentech.feat$symbol)
sce2 = sce1[genes2consider,]

rownames(genentech.exp) = genentech.feat$symbol
genetech.matched = genentech.exp[genes2consider,]
genetech.matched = avinash::readcount2tpm(genetech.matched, genentech.feat$length[match(genes2consider, genentech.feat$symbol)])
genentech.logfc = log(genetech.matched +1)
genentech.logfc = genentech.logfc - rowMeans(genentech.logfc)

genentech.response = genentech.pheno$binaryResponse
levels(genentech.response) = c(1,0)



out.list = list()
for (tt in seq(2,6)) {
  set.combo = combn(1:6, tt)
  for(uu in seq(ncol(set.combo))){
    sets = set.combo[,uu]
    for (xx in seq(length(sets)-1)) {
      set1 = sets[seq(xx)]
      set2 = setdiff(sets, set1)
      my.clusters = ifelse(data.curr$cluster %in% set1, 1, ifelse(data.curr$cluster %in% set2, 0, NA))
      na.inx = which(!is.na(my.clusters))
      markers <- findMarkers(sce2[,na.inx], my.clusters[na.inx])
      
      mark1 = markers[[1]]
      top10.genes = rownames(mark1)[1:10]
      mark1 = mark1[genes2consider,]
      score = cor(mark1[,4], genentech.logfc, method="spearman", use="pairwise.complete.obs")
      complete.auc = calc.stat.new(genentech.response, score[1,])
      dt1  =data.table(complete.auc[1],complete.auc[2], genes = "complete")
      
      out.dt = data.table(do.call(rbind, out))
      out.dt$genes = top10.genes
      
      # calc.stat.new(genentech.response, genentech.exp["NR4A1",])
      # calc.stat.new(genentech.response, genentech.logfc["NR4A1",])
      
      out = lapply(top10.genes, function(gene.curr) {
        calc.stat.new(genentech.response,genentech.exp[gene.curr,])
      })
      out.dt = data.table(do.call(rbind, out))
      out.dt$genes = top10.genes
      out.dt = rbind(out.dt, dt1 )
      out.dt$set1=paste(set1,collapse = ",")
      out.dt$set2=paste(set2,collapse = ",")
      out.list = append(out.list, out.dt)
    }
  }
  
  
  
}
out.list.dt = do.call(rbind, out.list)
xx = list()
for (tt in seq(length(out.list)/5)) {
  xx[[tt]] = data.table(do.call(cbind, out.list[5*(tt-1) + (1:5)]))
  
}
out.list.dt = do.call(rbind, xx)
 out.list.dt = out.list.dt[order(V1,decreasing = T)]
 out.list.dt[set2==6][genes=="complete"]
# list(complete.auc=complete.auc, out.dt=out.dt)
# colnames(mark1) 

```

## Take the direction 
```{r}
data.curr.comp1 = data.curr[diffusionmap1< 0 ,]
exp.curr = t(logcounts(sce2[,data.curr.comp1$sample.name]))
cor.comp2 = cor(data.curr.comp1$diffusionmap2, exp.curr, method="spearman", use="pairwise.complete.obs")
score = cor(cor.comp2[1,], genentech.logfc,  method="spearman", use="pairwise.complete.obs")
calc.stat.new(genentech.response, score[1,])

diff.genes = which(abs(cor.comp2) > .01)
 score = cor(cor.comp2[1,diff.genes], genentech.logfc[diff.genes,],  method="spearman", use="pairwise.complete.obs")
calc.stat.new(genentech.response, score[1,])
 
```
## Plot all the  immune genes and factors 
```{r}
save.dir = sprintf("%s/diffusionmap/", cwd)
dir.create(save.dir)
save.dir = sprintf("%s/diffusionmap/gene/", cwd)
dir.create(save.dir)
checkpoint.genes.curr = intersect(checkpoint.genes, colnames(icb.expression.matched))
data.all = as.data.frame(as.matrix(icb.expression.matched[cell.type.inx, checkpoint.genes.curr]))
colnames(data.all) = gsub(checkpoint.genes.curr, pattern="-", replacement = ".")
xx = color.clusters.features( data=data.all, cluster=data.curr[,.(diffusionmap1, diffusionmap2)],  color.cols = colnames(data.all),
    title="DiffusionMap",size=2, filename=sprintf("%s/gene", save.dir), normalize=F, do.discrete=F)

genes.sel = c("CD4", "GZMB", "HLA.DQB2", "STAT1", "TGFB1", "TNFRSF13B", "TNFRSF21", "TNFSF13B", "TRAC", "TRAF2", "TRAF5", "TRBC2", "VEGFB")
xx.sub = xx[genes.sel]
 xx.new = lapply( xx.sub, function (tt) 
   tt + 
    scale_colour_gradient_tableau(palette="Classic Red") +
    theme_classic() + theme(legend.position = "none") )

 # p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, nrow=3)

```

```{r}

output.inx=grep(pattern = ".output",colnames(icb.phenotype), value=T)
pheno.inx.start = which(output.inx=="B_cells_naive.output")
if.inx =  output.inx[seq(pheno.inx.start, length(output.inx))]
survival.inx = grep(pattern = ".time.output",colnames(icb.phenotype), value=T)
if.all.inx = c(survival.inx, if.inx)
embedding.inx=grep(pattern = "embedding",colnames(icb.phenotype), value = T)


if.exp =icb.phenotype[cell.type.inx, c(if.all.inx),with=F]
embedding.exp =icb.phenotype[cell.type.inx, c(embedding.inx),with=F]
colnames(if.exp) = gsub(if.all.inx,pattern=".output$", replacement = "" )

if.exp = as.data.frame(if.exp)
colnames(if.exp) = gsub(colnames(if.exp), pattern="-", replacement = ".")

# data_tsne.merge[,embedding.inx]
save.dir = sprintf("%s/diffusionmap/if2/", cwd)
dir.create(save.dir)
if.xx= color.clusters.features( data=if.exp, cluster=data.curr[,.(diffusionmap1, diffusionmap2)],  color.cols = colnames(if.exp),
    title="DiffusionMap",size=2, filename=sprintf("%s/if", save.dir), normalize=F, do.discrete=F)

# if.xx1 = if.xx

            
```


## For cell type specific genes
```{r}
cell.type.curr.sco = intersect(colnames(sco), data.curr$sample.name)
sco.curr = sco[,cell.type.curr.sco]
sco.curr <- FindVariableFeatures(sco.curr, selection.method = "vst", nfeatures = 2000)
sco.curr.markers <- FindAllMarkers(sco.curr, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.1)
# sco.curr.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
# ## heatmap plot 
# top10 <- sco.curr.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
# p = DoHeatmap(sco.curr, features = top10$gene) + NoLegend()

```

# Change the clustering  (https://github.com/satijalab/seurat/issues/252)[here]
```{r}
sco.curr@meta.data$deepImmune.clust = data.curr$cluster[match(colnames(sco.curr), data.curr$sample.name)]
Idents(object = sco.curr) <- sco.curr@meta.data$deepImmune.clust
sco.curr.markers <- FindAllMarkers(sco.curr, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.5)
sco.curr.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)

## heatmap plot 
top10 <- sco.curr.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
p = DoHeatmap(sco.curr, features = top10$gene) + NoLegend()
curr.dir = paste0(tsne.dir, "/markers")
dir.create(curr.dir)
filename = paste0(curr.dir, "heatmap_markers.pdf")
ggsave(file=filename, p, width=16, height=10)
# VlnPlot(sco.curr, features = c("STAT1", "CDKN1A"), slot = "counts", log = TRUE)

```



## Evaluate the markers in Genentech data
1. Individual gene expression
2. SSGSEA 
3. Estimate the fraction in each tumors 

```{r}
# library(IMvigor210CoreBiologies)
load("/liulab/asahu/data/ssgsea/xiaoman/Genentech/genentech_cds.RData") # data name is cds
genentech.exp = counts(cds)
genentech.feat = fData(cds)
genentech.pheno = pData(cds)

genentech.response = genentech.pheno$binaryResponse
levels(genentech.response) = c(1,0)

top10 = data.table(top10)

markers.auc = list()
for(ii in seq(length(markers))){
  genes.curr = top10[cluster==ii]$gene
  out = lapply(genes.curr, function(gene.curr) {
    exp.curr =genentech.exp[match(gene.curr, genentech.feat$symbol),]
    calc.stat.new(genentech.response, exp.curr)
  })
  out.dt = data.table(do.call(rbind, out))
  out.dt$genes = genes.curr
  out.dt$clust = ii
  markers.auc[[ii]] = out.dt
  
}


require(doMC)
require(foreach)
registerDoMC(cores = 8)
markers.auc = foreach(ii = seq(length(markers))) %do% {
  aa = markers[[ii]]
  genes.curr = rownames(aa)[1:40] 
  out = lapply(genes.curr, function(gene.curr) {
    exp.curr =genentech.exp[match(gene.curr, genentech.feat$symbol),]
    calc.stat.new(genentech.response, exp.curr)
  })
  out.dt = data.table(do.call(rbind, out))
  out.dt$genes = genes.curr
  out.dt$clust = ii
  out.dt
  
}

markers.auc.dt = do.call(rbind, markers.auc)
markers.auc.dt = markers.auc.dt[order(V1,decreasing =T)]

# proabably use SSGSEA to estiamte the fraction of tumors 

library(ggplot2)
require(ggrepel)
p = ggplot(data=markers.auc.dt, aes(x=as.factor(clust), y = V1)) +
  geom_boxplot() + geom_point() + 
  geom_boxplot(outlier.shape=10, outlier.size=8)  +
  geom_point(position="jitter", size=2) + 
  geom_text_repel(
    data = markers.auc.dt[V1>0.6],
    aes(x=as.factor(clust),  y = V1, label = genes),
    size = 3,
    box.padding = unit(0.35, "lines"),
    point.padding = unit(0.3, "lines")
  )  
filename = paste0(curr.dir, "marker_genentech_response.pdf")
ggsave(file=filename, p, width=16, height=10)

```

4. Conduct tsne using the Markers to differentiante between responders and non-responders

```{r}

top.markers = foreach(ii = seq(length(markers))) %dopar% {
  aa = markers[[ii]]
  rownames(aa)[1:100] 
}

genes.curr = unique(unlist(top.markers[c(1,7,8)]))

# top.markers = rownames(markers[[1]])[1:10]
genes.curr = intersect(genentech.feat$symbol , genes.curr)
exp.curr =log( genentech.exp[match(genes.curr, genentech.feat$symbol),] +1)
data.curr = as.data.frame(t(exp.curr))
data.curr$response = genentech.pheno$binaryResponse
all.p = plotSNE(data = data.curr, col=seq(length(genes.curr)), size = 4,do.discrete=T, title="Genentech Response",
                color.col = "response", perplexity = 30, theta = 0.1, pca=TRUE, 
                filename="/liulab/asahu/data/ssgsea/xiaoman/getz/tsnes/Monocyte_emb/Monocytes_marker_genentech_response_tsne.pdf", max_iter=1000)

all.p[[2]]

data.curr$response1 = genentech.pheno$`Best Confirmed Overall Response`
data.curr$response = ifelse(data.curr$response1=="PR", "PR", "PR-NOT")

all.p = plotSNE(data = data.curr, col=seq(length(genes.curr)), size = 4,do.discrete=T, title="Genentech Response",
                color.col = "response", perplexity = 30, theta = 0.1, pca=TRUE, 
                filename="/liulab/asahu/data/ssgsea/xiaoman/getz/tsnes/Monocyte_emb/Monocytes_marker_genentech_response_tsne.pdf", max_iter=1000)

all.p[[2]]
```






```{r}

library(scater)

curr.cell.exp  = t(icb.expression.matched[data.curr$sample.name,])

# sce = SingleCellExperiment(assays = list(counts = curr.cell.exp))
sce = SingleCellExperiment(assays = list(counts = curr.cell.exp, logcounts=log(curr.cell.exp +1)))
# logcounts(sce) = log(counts(sce) + 1) 

# ave.counts <- rowMeans(counts(sce))
keep <- rowMeans(counts(sce)) >= 0.2 & rowMeans(counts(sce) > 0) > 0.05
# sum(keep)
sce1 = sce[keep, ]
# sce1 = sce
# sce1 = normalize(sce1)
data.curr[,cluster1:=ifelse(cluster==5,1,0)]
my.clusters = as.numeric(data.curr$cluster)
clust.col <- rainbow(max(my.clusters))
markers <- findMarkers(sce1, data.curr$cluster)

top.marker1 = unique(unlist(lapply(markers, function(aa) {
  # xx = rownames(aa[aa$Top<= 10 & aa$logfc > 0,])
  genes1 = rownames(aa)
  aa = as.data.table(aa)
  logfc.col = grep("logFC", colnames(aa), value=T)
  aa$logfc.max = apply(aa[,logfc.col,with=F], 1,function(tt) max(abs(tt)))
  # aa[, lapply( .SD, function(tt) max(abs(tt))), .SDcols=logfc.col]
  aa$genes = genes1
  aa = aa[FDR< 1E-7][logfc.max > 0.5]
  checkpoint.dt = aa[genes %in% checkpoint.genes]
  g1 = checkpoint.dt[order(FDR)]
  g1 = g1[seq(min(3, ceiling(nrow(g1)/4)))]$genes
  g2 = checkpoint.dt[order(logfc.max,decreasing = T)]
  g2 = g2[seq(min(3, ceiling(nrow(g2)/4)))]$genes
  g3 = aa[order(FDR)]$genes[1:5]
  g4 = aa[order(logfc.max,decreasing = T)]$genes[1:5]
  # checkpoint.dt = checkpoint.dt[order(FDR)]
  # checkpoint.dt1 = checpoint.dt[order(logFC.5,decreasing = T)]
  # checpoint.df$genes = checkpoint.genes
  c( g1, g2, g3, g4)
})))

# correlation with diffusionmap
exp.mat = curr.cell.exp
stopifnot(identical(colnames(exp.mat), data.curr$sample.name))
cor.dfmap = WGCNA::corAndPvalue(unlist(c(data.curr[,.(diffusionmap1)])), t(exp.mat))
top.marker2 = unique(rownames(exp.mat)[c(which(unlist(cor.dfmap$cor)< -0.5 ),which(unlist(cor.dfmap$cor)> .4 ), order(unlist(cor.dfmap$p))[1:4])])

checkpoint.genes.curr = intersect(checkpoint.genes, rownames(exp.mat))
cor.dfmap = WGCNA::corAndPvalue(unlist(c(data.curr[,.(diffusionmap1)])), t(exp.mat[checkpoint.genes.curr,]))

top.marker3 = unique(rownames(exp.mat)[c(which(unlist(cor.dfmap$cor)< -0.33 ),which(unlist(cor.dfmap$cor)> .24 ), order(unlist(cor.dfmap$p))[1:4])])


znrom = function(tt) (tt -mean(tt,na.rm=T))/sd(tt,na.rm=T)
aa = markers[[5]]

top.markers.final = unique(c(top.marker1, top.marker2, top.marker3))
top.markers.final= top.markers.final[!is.na(top.markers.final)]
aa = markers[[5]]
genes1 = rownames(aa)
aa = as.data.table(aa)
logfc.col = grep("logFC", colnames(aa), value=T)
aa$logfc.max = apply(aa[,logfc.col,with=F], 1,function(tt) max((tt)))
aa$gene  = genes1

top.markers.final = aa[order(logfc.max,decreasing = T)]$gene[1:30]
top.exprs = log(curr.cell.exp[top.markers.final,,drop=FALSE] +1)
top.exprs = t(apply(top.exprs, 1, znorm))
# top.exprs = exprs(top.exprs)
heat.vals <- top.exprs - rowMeans(top.exprs)
heat.vals.reorder =heat.vals[,order(my.clusters)]
my.clusters1 = my.clusters[order(my.clusters)]

vcols <- viridis::viridis(256)
head(vcols)

library(ComplexHeatmap)
    Heatmap(top.exprs, 
         # col = vcols,
         column_split = data.curr$cluster1,
        cluster_rows = TRUE,
        cluster_columns = FALSE
    )


pdf("~/temp2.pdf")
heatmap3(heat.vals.reorder,   cexRow=0.6,
    ColSideColors=clust.col[my.clusters1], Rowv = T, Colv=NA, showColDendro=F, showRowDendro=F, scale="row") 
    legend("bottomleft", col=clust.col, legend=sort(unique(my.clusters1)), pch=16)
dev.off()





dt.tsne = data.table(data.curr)
dt.summary = dt.tsne[,sum(shape=="Responder")/sum(shape!="Responder"), by=clust]
dt.summary = dt.summary[order(clust)]

dt.summary$clust = factor(dt.summary$clust, levels=seq(7,1))
p = ggplot(data=dt.summary, aes(x=clust, y=V1)) + 
geom_col(aes(fill=V1)) + coord_flip() + theme_minimal() 
ggsave(file="~/temp3.pdf", p)


curr.cell.immune.factors  = t(data.curr.all.genes[locx,9:57]) 
curr.cell.immune.norm = t(apply(curr.cell.immune.factors, 1, qnorm.array))

curr.cell.immune.reorder =curr.cell.immune.norm[,order(my.clusters)]
my.clusters1 = my.clusters[order(my.clusters)]

# pdf("~/project/deeplearning/icb/data/Getz_scRNA/data/Monocytes/immune_factor_heatmap.pdf")
# heatmap3(curr.cell.immune.reorder,   cexRow=0.6,
#     ColSideColors=clust.col[my.clusters1], Rowv = T, Colv=NA, showColDendro=F, showRowDendro=F) 
# dev.off()


```

## For Chenfei
```{r}
save(file="/liulab/asahu/data/ssgsea/xiaoman/misannot.RData", phenotype_sel.mod, cd4_bnaive)

```

```{r}
proj="/liulab/asahu/data/ssgsea/xiaoman/getz/tsnes/Monocyte_emb/Pagoda";
dir.create(proj)
proj; min.c = 3; min.g = 200; nPCs = 100; nKs = 30
#=========QC========
message("Check gene and cell coverage ...")
# genes x cells matrix
library(pagoda2)
tpmMat = t(icb.expression.matched[locx,]);
tpmMat = Matrix(tpmMat)
nGene = apply(tpmMat, 2, function(x) length(x[x>0]))
nCell = apply(tpmMat, 1, function(x) length(x[x>0]))


cm = tpmMat
par(mfrow=c(1,2), mar = c(3.5,3.5,2.0,0.5), mgp = c(2,0.65,0), cex = 1.0)
hist(log10(colSums(cm)+1),main='molecules per cell',col='cornsilk',xlab='log10(molecules per cell)')
counts <- gene.vs.molecule.cell.filter(cm,min.cell.size=500)
hist(log10(rowSums(counts)+1),main='Molecules per gene',xlab='molecules (log10)',col='cornsilk')
abline(v=1,lty=2,col=2)
hist(log10(rowSums(counts)+1),main='Molecules per gene',xlab='molecules (log10)',col='cornsilk')


counts <- counts[rowSums(counts)>=5,]
rownames(counts) <- make.unique(rownames(counts))
r <- Pagoda2$new(counts,log.scale=TRUE, n.cores=16)
r$adjustVariance(plot=T,gam.k=10)
r$calculatePcaReduction(nPcs=nPCs,n.odgenes=3e3,maxit=1000)
r$makeKnnGraph(k=40,type='PCA',center=T,distance='cosine');
require(igraph)
r$getKnnClusters(method=infomap.community,type='PCA')
M <- 30; r$getEmbedding(type='PCA',embeddingType = 'largeVis', M=M,perplexity=30,gamma=1/M,alpha=1)
r$plotEmbedding(type='PCA',show.legend=F,mark.clusters=T,min.group.size=50,shuffle.colors=F,mark.cluster.cex=1,alpha=0.1,main='clusters (largeVis)')
r$getDifferentialGenes(type='PCA',verbose=T,clusterType='community')

## calculate tsne
r$getEmbedding(type='PCA',embeddingType='tSNE',perplexity=50,verbose=F,n.cores=30)
# plot tsne
r$plotEmbedding(type='PCA',embeddingType='tSNE',show.legend=F,mark.clusters=T,min.group.size=1,shuffle.colors=F,mark.cluster.cex=1,alpha=0.1,main='clusters (tSNE)')

## differential expression analysis
r$getDifferentialGenes(type='PCA',verbose=T,clusterType='community')
de <- r$diffgenes$PCA[[1]][['2']];
r$plotGeneHeatmap(genes=rownames(de)[1:15],groups=r$clusters$PCA[[1]])

```


```{r}

pagoda.exp = r$counts
library(scran)
data.combined = data_tsne.merge
data.combined$sample.name =d2$sample.name
sce = SingleCellExperiment(
  assays = list(counts =t(pagoda.exp)))
sce1 = normalize(sce)
data.tsne.dt = data.table(data.tsne) 
setdiff(rownames(pagoda.exp), data.tsne.dt$cell_name)
data.tsne.dt = data.tsne.dt[match(rownames(pagoda.exp), data.tsne.dt$cell_name)]
data.tsne.dt$response = data.combined[match(data.tsne.dt$cell_name, data.combined$sample.name),]$response
my.clusters = as.numeric(data.tsne.dt$clust)
clust.col <- rainbow(max(my.clusters))
markers <- findMarkers(sce1, data.tsne.dt$clust)


genes.names = rownames(markers[[1]])[1:10]
exp = cbind(data.frame(pagoda.exp[,genes.names, drop=F]), shape=as.factor(data.tsne.dt$response))
ps = color.clusters.features(data = exp, cluster = data.tsne.dt[,.(V1, V2)], color.cols = genes.names, size=2, do.discrete = F, normalize = F)
```


```{r}
library(scater)
monocyte.exp  = data.exp[,locx]
sce = SingleCellExperiment(
  assays = list(counts = monocyte.exp))
ave.counts <- rowMeans(counts(sce))
keep <- rowMeans(counts(sce)) >= 0.2
sum(keep)
sce1 = sce[keep, ]
sce1 = normalize(sce1)
```





