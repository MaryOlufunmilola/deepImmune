p <- p+ scale_color_gradientn(colours = heat.colors(20, alpha=0.7, rev=T))
# p <- p +
#     scale_colour_gradient_tableau(palette="Classic Red") +
#     theme_classic() + theme(legend.position = "none")
#
}
##theme(legend.position = "none")
if(!is.null(filename)) {
filename.curr = sprintf("%s_%s.pdf", filename, gsub(color.col, pattern="-", replacement = "_"))
ggsave(file=filename.curr, p)
}
ps[[color.col]]  = p
},
error = function(e) ps[[color.col]]  = NA
)
}
ps
}
xx = color.clusters.features( data=data.all, cluster=data.curr[,.(UMAP1, UMAP2)],  color.cols =genes.sel,
title="",size=2, filename=sprintf("%s/gene", save.dir), normalize=F, do.discrete=F)
xx[1]
save.dir
top10
top10[cluster==1]
# xx.sub = xx[genes.sel]
#
top10.dt =data.table(top10)
xx.new = xx[top10.dt[cluster==1]$gene]
xx.new = lapply( xx.sub, function (tt)
tt +
scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
xx.new = lapply( xx.new, function (tt)
tt +
scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
xx.new[[1]]
length(xx.new)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, ncol=6)
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, ncol=6)
print(p.genes)
xx.new = xx[top10.dt[cluster==2]$gene]
top10 <- sco.curr.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
top10.dt =data.table(top10)
dim(top10.dt)
xx.new = xx[top10.dt[cluster==1]$gene]
xx.new = lapply( xx.new, function (tt)
tt +
scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
length(xx.new)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, ncol=3)
print(p.genes)
# cluster=1
gene.sel = c("IL7R", "CDKN1A", "LMNA", "NR4A3", "")
xx.new = xx[top10.dt[gene.sel]$gene]
xx.new = xx[top10.dt[gene.sel]
xx.new = xx[top10.dt[gene.sel]]
xx.new = xx[gene.sel]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, ncol=3)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, ncol=4)
print(p.genes)
save.dir
xx.new = xx[top10.dt[cluster==2]$gene]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, ncol=4)
print(p.genes)
# cluster=1
gene.sel = c("TOP2A", "MKI67", "TYMS", "AURKB","CDK1", "MCM2", "STMN1")
xx.new = xx[gene.sel]
gene.sel = c("TOP2A", "MKI67", "TYMS", "AURKB","CDK1", "MCM2", "STMN1")
xx.new = xx[gene.sel]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, ncol=4)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, ncol=4)
print(p.genes)
genes.sel
sum(genes.sel == "TYMS")
gene.sel = c("TOP2A", "MKI67", "TYMS", "AURKB","CDK1", "MCM2", "STMN1")
xx1 = color.clusters.features( data=data.all, cluster=data.curr[,.(UMAP1, UMAP2)],  color.cols =genes.sel,
title="",size=2, filename=sprintf("%s/gene", save.dir), normalize=F, do.discrete=F)
genes.sel = c("TOP2A", "MKI67", "TYMS", "AURKB","CDK1", "MCM2", "STMN1")
xx1 = color.clusters.features( data=data.all, cluster=data.curr[,.(UMAP1, UMAP2)],  color.cols =genes.sel,
title="",size=2, filename=sprintf("%s/gene", save.dir), normalize=F, do.discrete=F)
xx.new = xx1[gene.sel]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, ncol=4)
print(p.genes)
genes.sel
xx1 = color.clusters.features( data=as.data.frame(as.matrix(icb.expression.matched[cell.type.inx, genes.sel])), cluster=data.curr[,.(UMAP1, UMAP2)],  color.cols =genes.sel,
title="",size=2, filename=sprintf("%s/gene", save.dir), normalize=F, do.discrete=F)
xx.new = xx1[gene.sel]
xx.new = xx1[gene.sel]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, ncol=4)
xx.new = xx1[gene.sel]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, ncol=4)
print(p.genes)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, nrow=2)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, nrow=2)
print(p.genes)
genes.sel = c("PDCD1", "HAVCR2", "TIGIT", "LAG3", "VCAM1")
xx1 = color.clusters.features( data=as.data.frame(as.matrix(icb.expression.matched[cell.type.inx, genes.sel])), cluster=data.curr[,.(UMAP1, UMAP2)],  color.cols =genes.sel,
title="",size=2, filename=sprintf("%s/gene", save.dir), normalize=F, do.discrete=F)
xx.new = xx1[gene.sel]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, nrow=2)
print(p.genes)
xx1$PDCD1
xx1$HAVCR2
xx1$TIGIT
xx1$LAG3
xx1$VCAM1
length(xx.new)
xx.new = xx1[genes.sel]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, nrow=2)
print(p.genes)
top10.dt[cluster==3]$gene
xx.new = xx[top10.dt[cluster==3]$gene]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, nrow=2)
print(p.genes)
genes.sel = c("PDCD1", "HAVCR2", "TIGIT", "LAG3", "VCAM1", "PLAC8", "GLNY", "TGFB3")
xx1 = color.clusters.features( data=as.data.frame(as.matrix(icb.expression.matched[cell.type.inx, genes.sel])), cluster=data.curr[,.(UMAP1, UMAP2)],  color.cols =genes.sel,
title="",size=2, filename=sprintf("%s/gene", save.dir), normalize=F, do.discrete=F)
xx.new = xx1[genes.sel]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, nrow=2)
print(p.genes)
print(p.genes)
xx.new[[1]]
xx1 = color.clusters.features( data=as.data.frame(as.matrix(icb.expression.matched[cell.type.inx, genes.sel])), cluster=data.curr[,.(UMAP1, UMAP2)],  color.cols =genes.sel,
title="",size=2, filename=sprintf("%s/gene", save.dir), normalize=F, do.discrete=F)
xx1 = color.clusters.features( data=as.data.frame(as.matrix(icb.expression.matched[cell.type.inx, genes.sel])), cluster=data.curr[,.(UMAP1, UMAP2)],  color.cols =genes.sel,
title="",size=2, filename=NULL, normalize=F, do.discrete=F)
genes.sel = c("PDCD1", "HAVCR2", "TIGIT", "LAG3", "VCAM1", "PLAC8", "GLNY", "TGFBR3")
xx1 = color.clusters.features( data=as.data.frame(as.matrix(icb.expression.matched[cell.type.inx, genes.sel])), cluster=data.curr[,.(UMAP1, UMAP2)],  color.cols =genes.sel,
title="",size=2, filename=NULL, normalize=F, do.discrete=F)
genes.sel = c("PDCD1", "HAVCR2", "TIGIT", "LAG3", "VCAM1")
xx1 = color.clusters.features( data=as.data.frame(as.matrix(icb.expression.matched[cell.type.inx, genes.sel])), cluster=data.curr[,.(UMAP1, UMAP2)],  color.cols =genes.sel,
title="",size=2, filename=NULL, normalize=F, do.discrete=F)
top10.dt[cluster==3]
genes.sel = c("PDCD1", "HAVCR2", "TIGIT", "LAG3", "VCAM1", "PLAC8", "GNLY", "TGFBR3")
xx1 = color.clusters.features( data=as.data.frame(as.matrix(icb.expression.matched[cell.type.inx, genes.sel])), cluster=data.curr[,.(UMAP1, UMAP2)],  color.cols =genes.sel,
title="",size=2, filename=NULL, normalize=F, do.discrete=F)
xx.new = xx1[genes.sel]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, nrow=2)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, nrow=2)
print(p.genes)
xx.new = xx[top10.dt[cluster==4]$gene]
xx.new = xx1[genes.sel]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, nrow=2)
print(p.genes)
xx.new = xx[top10.dt[cluster==4]$gene]
xx.new = lapply( xx.new, function (tt)
tt +
# scale_colour_gradient_tableau(palette="Classic Red") +
theme_classic() + theme(legend.position = "none") )
library(cowplot)
# p <- plot_grid(p.dm1, p.dm2, p.dm3, nrow=2)
p.genes <- plot_grid(plotlist = xx.new, nrow=2)
print(p.genes)
save.dor
save.dir
tab.file = fread("/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/SCOPe/astral-scopedom-seqres-gd-sel-gs-bib-95-2.06.test.sampledpairs.txt")
dim(tab.file)
tab.file
tab.file[1]
fa.file = fread("/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/SCOPe/astral-scopedom-seqres-gd-sel-gs-bib-95-2.06.train.fa")
fa.file
di(fa.file)
dim(fa.file)
fa.file[1]
fa.file[2]
fa.file = fread("/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/SCOPe/astral-scopedom-seqres-gd-sel-gs-bib-95-2.06.train.fa"header=F)
fa.file = fread("/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/SCOPe/astral-scopedom-seqres-gd-sel-gs-bib-95-2.06.train.fa",header=F)
fa.file
fa.file[1]
fa.file[2]
fa.file[3]
fa.file[4]
fa.file[5]
fa.file[6]
fa.file[7]
library("seqinr")
ref <- read.fasta(file = "/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/SCOPe/astral-scopedom-seqres-gd-sel-gs-bib-95-2.06.train.fa")
ref
ref <- read.fasta(file = "/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/SCOPe/astral-scopedom-seqres-gd-sel-gs-bib-95-2.06.train.fa", seqtype = "AA")
ref[1]
tab.file[1]
tab.file[pdb_id_A =="d3oiga1"]
tab.file[pdb_id_B =="d3oiga1"]
ref$d2vz6a1
trust4.cdr3
trust4.cdr3
trust4.cdr3[1]
tcell.cdr3$aa
trust4.cdr3[1]
trust4.cdr3$aa
trust4.copy = trust4.cdr3
trust4.copy = trust4.cdr3
tcell.copy$aa = tcell.cdr3[,{
start = ifelse(V=="*", 1 + ( str.len %%3), 1)
end = ifelse(J=="*", floor(str.len/3) *3, str.len)
aa = translate.seq(stringr::str_sub(CDR3,start, end))
ifelse(V=="*", stringi::stri_c("X", aa),
ifelse(J=="*", stringi::stri_c("X", aa), aa))
}]
trust4.copy$aa = tcell.cdr3[,{
start = ifelse(V=="*", 1 + ( str.len %%3), 1)
end = ifelse(J=="*", floor(str.len/3) *3, str.len)
aa = translate.seq(stringr::str_sub(CDR3,start, end))
ifelse(V=="*", stringi::stri_c("X", aa),
ifelse(J=="*", stringi::stri_c("X", aa), aa))
}]
len(trust4.out)
length(trust4.out)
length(trust4.out$cdr3)
trust4.cdr3  =do.call(rbind,  lapply(seq_along(trust4.out$cdr3), function(tt) {
dt = trust4.out$cdr3[[tt]]
if(nrow(dt) ==0 ){
dt = NULL
}else{
dt$cellid = names(trust4.out$cdr3)[[tt]]
}
dt
}))
min.len = 7*3
max.len =25*3
cols = c("consesus_id", "the_index_of_CDR3_in_that_consensus", "V", "J", "C", "CDR1", "CDR2", "CDR3", "score_of_CDR3", "abundance")
setnames(trust4.cdr3,1:10, cols)
trust4.cdr3$sample.name.short = sample.name.map[match(trust4.cdr3$cellid,trust.id)]$sample.name.short
trust4.cdr3$sample.name = sample.name.map[match(trust4.cdr3$cellid,trust.id)]$sample.name
trust4.cdr3[,str.len:=stringr::str_length(CDR3)]
trust4.cdr3[,is.alpha:=ifelse(grepl("TRA", V)|grepl("TRA", J)| grepl("TRA", C), T, F)]
trust4.cdr3[,is.beta:=ifelse(grepl("TRB", V)|grepl("TRB", J)| grepl("TRB", C), T, F)]
trust4.cdr3[,abs.score:= abundance * (score_of_CDR3+.001)]
dim(trust4.cdr3)
# trust4.cdr3[, cellid.short:=sapply(cellid, substr.id)]
if(!is.na(min.len)) trust4.cdr3 = trust4.cdr3[str.len>= min.len]
if(!is.na(max.len)) trust4.cdr3 = trust4.cdr3[str.len<= max.len]
trust4.copy = trust4.cdr3
# trust4.copy[,fa.label:=paste0(">", )]
trust4.copy$aa = trust4.copy[,{
start = ifelse(V=="*", 1 + ( str.len %%3), 1)
end = ifelse(J=="*", floor(str.len/3) *3, str.len)
aa = translate.seq(stringr::str_sub(CDR3,start, end))
ifelse(V=="*", stringi::stri_c("X", aa),
ifelse(J=="*", stringi::stri_c("X", aa), aa))
}]
trust4.copy[1]
ref[[1]]
trust4.copy[,fa.file:=paste("<", V, J, C, cell.id)]
trust4.copy[,fa.file:=paste("<", V, J, C, cellid)]
trust4.copy[1]
trust4.fa = unlist(t(trust4.copy[,.(fa.file, aa)]))
head( trust4.fa)
trust4.fa = c(t(trust4.copy[,.(fa.file, aa)]))
length(trust4.fa)
trust4.fa[[1]]
trust4.fa[1:2]
trust4.fa[1:7]
cwd = "/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/Getz"
dir.create(cwd)
write.table(file = "/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/Getz/getz.cdr3.fa", x= trust4.fa, row.names = T, quote =F, col.names = T)
trust4.copy[1]
trust4.copy[,myid:=paste0("V",.N)]
trust4.copy[1]
trust4.copy[,myid:=paste0("V",seq(.N))]
trust4.copy$myid
trust4.copy[,fa.file:=paste(paste0("<",myid),   V, J, C, cellid)]
trust4.copy[1]
trust4.fa = c(t(trust4.copy[,.(fa.file, aa)]))
write.table(file = "/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/Getz/getz.cdr3.fa", x= trust4.fa, row.names = T, quote =F, col.names = T)
write.table(file = "/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/Getz/getz.cdr3.fa", x= trust4.fa, row.names = F, quote =F, col.names = F)
trust4.copy[,fa.file:=paste(paste0(">",myid),   V, J, C, cellid)]
trust4.fa = c(t(trust4.copy[,.(fa.file, aa)]))
write.table(file = "/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/Getz/getz.cdr3.fa", x= trust4.fa, row.names = F, quote =F, col.names = F)
trust4.copy[,fa.file:=paste(paste0(">",myid),  "c.2.1.2", V, J, C, cellid)]
trust4.fa = c(t(trust4.copy[,.(fa.file, aa)]))
write.table(file = "/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/Getz/getz.cdr3.fa", x= trust4.fa, row.names = F, quote =F, col.names = F)
reticulate::repl_python()
train_iterator = torch.utils.data.DataLoader(dataset_train
, batch_size=batch_size
, collate_fn=collate_paired_sequences
write.table(file = "/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/Getz/getz.cdr3.100.fa", x= trust4.fa[1:100], row.names = F, quote =F, col.names = F)
reticulate::repl_python()
trust4.copy[,fa.file:=paste(paste0(">",myid),  "/356-387 S0E8J4.1 PF16503.4;zn-ribbon_14;")]
trust4.fa = c(t(trust4.copy[,.(fa.file, aa)]))
write.table(file = "/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/Getz/getz.cdr3.fa", x= trust4.fa, row.names = F, quote =F, col.names = F)
write.table(file = "/liulab/asahu/softwares/protein-sequence-embedding-iclr2019/data/Getz/getz.cdr3.100.fa", x= trust4.fa[1:100], row.names = F, quote =F, col.names = F)
reticulate::repl_python()
reticulate::repl_python()
installed.packages("RcppCNPy")
install.packages("RcppCNPy")
reticulate::repl_python()
reticulate::repl_python()
system("cp /liulab/xmwang/Avi/gad.gsva*.csv /liulab/asahu/data/ssgsea/xiaoman/getz/ssgsea")
aa = fread("/liulab/xmwang/Avi/gad.gsva_0.csv")
aa
dim(aa)
aa
rownames(aa)
aa[1]
aa[1,]
aa[1,1:10]
aa = read.csv("/liulab/xmwang/Avi/gad.gsva_0.csv")
dim(aa)
colnames(aa)
rownames(aa)
aa = read.csv2("/liulab/xmwang/Avi/gad.gsva_0.csv")
rownames(aa)
aa = fread("/liulab/xmwang/Avi/gad.gsva_0.csv")
read.gsva <- function(file) {
aa = fread(file)
aa.mat = as.matrix(aa[,-1,with=F])
rownames(aa.mat) = aa$V1
aa.mat
}
gsva.mat = do.call(cbind,lapply(files, function(file) read.gsva(file)))
files = list.files(path = "/liulab/xmwang/Avi",pattern = "gad.gsva*.csv", full.names = T)
gsva.mat = do.call(cbind,lapply(files, function(file) read.gsva(file)))
files
files = list.files(path = "/liulab/asahu/data/ssgsea/xiaoman/getz/ssgsea", pattern = "gad.gsva*.csv", full.names = T)
files
files = list.files(path = "/liulab/asahu/data/ssgsea/xiaoman/getz/ssgsea", pattern = "gad.gsva", full.names = T)
files
gsva.mat = do.call(cbind,lapply(files, function(file) read.gsva(file)))
dim(gsva.mat)
colnames(gsva.mat)
rownams(gsva.mat)
rownames(gsva.mat)
gsva.mat = t(do.call(cbind,lapply(files, function(file) read.gsva(file))))
dim(gsva.mat)
library(data.table)
source("/homes6/asahu/project/deeplearning/icb/deepImmune/source.R")
cwd= "/homes6/asahu/project/deeplearning/icb/data/tcga/scrna.v4.genes/tensorboardLog/nopipeline_vae_20190819-161104/epoch-142/"
dir.create(cwd)
# system(sprintf("cp /homes6/asa/hu/project/deeplearning/icb//data/Getz_scRNA/scrna.v4.genes/val_prediction.csv %s", cwd))
dataset.sample.name = fread("/homes6/asahu/project/deeplearning/icb/data/Getz_scRNA//scrna.v4.genes/samples_name.txt")$x
icb.phenotype= fread(sprintf("%s/val_prediction.csv", cwd))
icb.phenotype = icb.phenotype[unlist(icb.phenotype$sample_name) +1]
## correct the headers
header = fread("/homes6/asahu/project/deeplearning/icb/data/tcga/scrna.v4.genes/tensorboardLog/nopipeline_vae_20190819-161104/best_val_0.csv",nrows = 1)
colnames(icb.phenotype) = colnames(header)
icb.phenotype.col.dt = data.table(colnames(icb.phenotype), seq(ncol(icb.phenotype)))
load("~/project/deeplearning/icb/data/Getz_scRNA/phenotype_sel.mod.RData")
resp = fread("/liulab/asahu/data/ssgsea/xiaoman/getz/GSE120575_patient_ID_single_cells.txt", skip=19)
xx = paste0("V",1:35)
colnames(resp)[1:35] = xx
resp$V2 = gsub(resp$V2, pattern="-", replacement=".")
# resp.patient
resp.matched=resp[match(phenotype_sel.mod$sample.name, resp$V2)]
response = resp.matched$V6
response.bin = ifelse(response=="Responder", 1, 0)
library(pROC)
cell.types = unique((phenotype_sel.mod$assign.ident.2) )
pre_post = resp$V5
pretreatment.samples = grep(pre_post, pattern="^Pre")
posttreatment.samples = grep(pre_post, pattern="^Post")
load("~/project/deeplearning/icb/data/Getz_scRNA/dataset_ssgsea_temp.RData")
load("~/project/deeplearning/icb/data/Getz_scRNA/headers.RData")
icb.expression = t(dataset_ssgsea_temp[,2:16292, with=F])
colnames(icb.expression) =  dataset_ssgsea_temp$gene_name
rownames(icb.expression) =  gsub(unlist(headers[1])[-1], pattern="-", replacement=".")
phenotype_sel.mod$sample.name = gsub(phenotype_sel.mod$sample.name, pattern="-", replacement=".")
length(intersect(rownames(icb.expression), phenotype_sel.mod$sample.name))
icb.expression.matched = icb.expression[match(phenotype_sel.mod$sample.name, rownames(icb.expression)),]
icb.expression.matched = icb.expression[match(phenotype_sel.mod$sample.name, rownames(icb.expression)),]
identical(phenotype_sel.mod$sample.name, dataset.sample.name)
rm(dataset_ssgsea_temp, icb.expression)
plot.aucs = function(cwd, indexes,  icb.phenotype=icb.phenotype){
load("/liulab/asahu/data/ssgsea/xiaoman/getz/chenfei1.marker.topaucs.genes.list.RData")
# save(file="/liulab/asahu/data/ssgsea/xiaoman/getz/chenfei1.marker.topaucs.final.RData", topaucs.final)
load("/liulab/asahu/data/ssgsea/xiaoman/getz/chenfei1.marker.topaucs.genes.RData")
aa = topaucs.genes.list$Monocyte[treat=="Pre"]
auc.dir = sprintf("%s/aucs",cwd)
dir.create(auc.dir)
cell.types = unique(phenotype_sel.mod$assign.ident.2)
require(doMC)
require(foreach)
registerDoMC(cores = 32)
Pre.p = Post.p = All.p = list()
library(parallel)
# out = foreach(cell.type = cell.types) %dopar% {
for(cell.type in cell.types) {
print(cell.type)
cell.type.str = gsub(cell.type, pattern="/", replacement=".or.")
cell.type.str = gsub(cell.type.str, pattern="-", replacement=".or.")
inx = intersect(which(phenotype_sel.mod$assign.ident.2==cell.type), pretreatment.samples)
# aucs.dt = topaucs.genes[treat=="Pre" & label==cell.type]
aucs.dt = (topaucs.genes.list[[cell.type]])[treat=="Pre"][order(V2)][1:2000]
Pre.p[[cell.type]] = plot.aucs.hist(inx, indexes = indexes, filename =sprintf("%s/pretreatment_%s.pdf", auc.dir, cell.type.str), title= sprintf("Pretreatment %s", cell.type.str), aucs.dt = aucs.dt)
inx = intersect(which(phenotype_sel.mod$assign.ident.2==cell.type), posttreatment.samples)
aucs.dt = topaucs.genes.list[[cell.type]][treat=="Post"][order(V2)][1:2000]
Post.p[[cell.type]] = plot.aucs.hist(inx, indexes = indexes, filename = sprintf("%s/posttreatment_%s.pdf", auc.dir, cell.type.str), title= sprintf("Posttreatment %s  ", cell.type.str), aucs.dt = aucs.dt)
inx =which(phenotype_sel.mod$assign.ident.2==cell.type)
aucs.dt = topaucs.genes.list[[cell.type]][treat=="All"][order(V2)][1:2000]
All.p[[cell.type]] = plot.aucs.hist(inx, indexes = indexes, filename = sprintf("%s/Alltreatment_%s.pdf", auc.dir, cell.type.str), title= sprintf("All %s  ", cell.type.str), aucs.dt = aucs.dt)
}
biauc.dir = sprintf("%s/biaucs",cwd)
dir.create(biauc.dir)
icb.phenotype.output = icb.phenotype[,selected.outputs, with=F]
setnames(icb.phenotype.output, colnames(icb.phenotype.output), gsub(colnames(icb.phenotype.output), pattern=".output$", replacement="") )
mat = cbind(icb.expression.matched, as.matrix(icb.phenotype.output))
Pre.all.aucs = plot.biauc(ps=Pre.p,  mat=mat, dir = biauc.dir, cell.types = phenotype_sel.mod$assign.ident.2, indexes =pretreatment.samples)
Pre.all.aucs[["auc.ps"]] = Pre.p
Post.all.aucs = plot.biauc(ps=Post.p,  mat=mat, dir = biauc.dir, cell.types = phenotype_sel.mod$assign.ident.2, indexes =posttreatment.samples)
Post.all.aucs[["auc.ps"]] = Post.p
All.all.aucs = plot.biauc(ps=All.p,  mat=mat, dir = biauc.dir, cell.types = phenotype_sel.mod$assign.ident.2, indexes = seq(nrow(mat)))
All.all.aucs[["auc.ps"]] = All.p
AUCs = list(Pre.all.aucs, Post.all.aucs,All.all.aucs)
save(file=sprintf("%s/AUCs.RData",biauc.dir), AUCs)
}
source("source.proj.R")
cwd = "/liulab/asahu/data/ssgsea/xiaoman/getz/ssgsea/eval"
dir.create(cwd, recursive = T)
phenotype_sel.mod$sample.name
sum( rownames(gsva.mat) %in% phenotype_sel.mod$sample.name)
rownames(gsva.mat) =  gsub(unlist(headers[1])[-1], pattern="-", replacement=".")
gsva.mat.matched = gsva.mat[match(phenotype_sel.mod$sample.name, rownames(gsva.mat)),]
gsva.mat.matched = gsva.mat[match(phenotype_sel.mod$sample.name, rownames(gsva.mat)),]
gsva.mat.matched = gsva.mat[match(phenotype_sel.mod$sample.name, rownames(gsva.mat)),]
identical(phenotype_sel.mod$sample.name, dataset.sample.name)
stopifnot(identical(phenotype_sel.mod$sample.name, dataset.sample.name))
gsva.mat.matched.dt = data.table(gsva.mat.matched)
indexes = colnames(gsva.mat.matched.dt)
out = plot.aucs(cwd=cwd, indexes =indexes, icb.phenotype=gsva.mat.matched.dt)
