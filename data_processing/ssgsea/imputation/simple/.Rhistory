geneClusters = geneClusters, fun = fun_name, .call = match.call(expand.dots = TRUE))
}
formula_res_bulk <- compareCluster.unverselist(ENTREZID~up_or_down+type, data=bulk.combined.dt[P< 5E-2][!is.na(up_or_down)], fun="clusterProfiler::enrichKEGG", organism="hsa", pvalueCutoff=0.1, universe.dt=bulk.combined.dt, universe.var = "ENTREZID")
head(groupVarName)
class(groupVarName)
groupVarName
sapply(as.character(clProf.df$Cluster),
strsplit, split = "\\.") %>% do.call(rbind, .)
aa =sapply(as.character(clProf.df$Cluster),
strsplit, split = "\\.") %>% do.call(rbind, .)
head(aa)
xx =  sapply(as.character(clProf.df$Cluster),
strsplit, split = "\\.")
head(xx)
sapply(xx, length)
formula_res_bulk <- compareCluster.unverselist(ENTREZID~up_or_down+type, data=bulk.combined.dt[P< 5E-2][!is.na(up_or_down)], fun="clusterProfiler::enrichKEGG", organism="hsa", pvalueCutoff=0.1, universe.dt=bulk.combined.dt, universe.var = "ENTREZID")
grouping.formula
nemes(genes.Cluster)
names(genes.Cluster)
names(genesCluster)
names(genesClusters)
names(geneClusters)
grouping.formula
groupVarName
compareCluster.unverselist = function (geneClusters, fun = "enrichGO", data = "", universe.dt = NULL, universe.var=NULL,  ...)
{
# require(plyr)
fun_name <- fun
fun <- eval(parse(text = fun))
if (typeof(geneClusters) == "language") {
if (!is.data.frame(data)) {
stop("no data provided with formula for compareCluster")
}
else {
genes.var = all.vars(geneClusters)[1]
grouping.formula = gsub("^.*~", "~", as.character(as.expression(geneClusters)))
if (is.data.frame(data) && grepl("+", grouping.formula)) {
groupVarName <- strsplit(grouping.formula, split = "\\+") %>%
unlist %>% gsub("~", "", .) %>% gsub("^\\s*", "", .) %>% gsub("\\s*$", "", .)
for (gg in groupVarName) {
data[[gg]]  = data[[gg]] %>% gsub("\\.", ., replacement = "_")
universe.dt[[gg]]  = universe.dt[[gg]] %>% gsub("\\.", ., replacement = "_")
}
}
geneClusters = plyr::dlply(.data = data, formula(grouping.formula),
.fun = function(x) {
as.character(x[[genes.var]])
})
universeList = plyr::dlply(.data = universe.dt, formula(grouping.formula),
.fun = function(x) {
as.character(x[[universe.var]])
})
}
}
stopifnot(all(names(geneClusters) %in% names(universeList)))
clProf <- plyr::llply(names(geneClusters), .fun = function(i) {
geneCluster = geneClusters[[i]]
universe = universeList[[i]]
x = suppressMessages(fun(geneCluster, universe=universe, ...))
if (class(x) == "enrichResult" || class(x) == "groupGOResult") {
x= as.data.frame(x)
}
# browser()
if(nrow(x) > 0)
x$Cluster = i
x
})
clusters.levels = names(geneClusters)
clProf.df <- plyr::ldply(clProf, rbind)
if (nrow(clProf.df) == 0) {
stop("No enrichment found in any of gene cluster, please check your input...")
}
# clProf.df <- plyr::rename(clProf.df, c(.id = "Cluster"))
# clProf.df$Cluster = cluster.levels
clProf.df$Cluster = factor(clProf.df$Cluster, levels = clusters.levels)
if (is.data.frame(data) && grepl("+", grouping.formula)) {
# groupVarName <- strsplit(grouping.formula, split = "\\+") %>%
#     unlist %>% gsub("~", "", .) %>% gsub("^\\s*", "",
#                                          .) %>% gsub("\\s*$", "", .)
# browser()
groupVars <- sapply(as.character(clProf.df$Cluster),
strsplit, split = "\\.") %>% do.call(rbind, .)
for (i in seq_along(groupVarName)) {
clProf.df[, groupVarName[i]] <- groupVars[, i]
}
i <- which(colnames(clProf.df) %in% groupVarName)
j <- (1:ncol(clProf.df))[-c(1, i)]
clProf.df <- clProf.df[, c(1, i, j)]
}
new("compareClusterResult", compareClusterResult = clProf.df,
geneClusters = geneClusters, fun = fun_name, .call = match.call(expand.dots = TRUE))
}
compareCluster.unverselist = function (geneClusters, fun = "enrichGO", data = "", universe.dt = NULL, universe.var=NULL,  ...)
{
# require(plyr)
fun_name <- fun
fun <- eval(parse(text = fun))
if (typeof(geneClusters) == "language") {
if (!is.data.frame(data)) {
stop("no data provided with formula for compareCluster")
}
else {
genes.var = all.vars(geneClusters)[1]
grouping.formula = gsub("^.*~", "~", as.character(as.expression(geneClusters)))
if (is.data.frame(data) && grepl("+", grouping.formula)) {
groupVarName <- strsplit(grouping.formula, split = "\\+") %>%
unlist %>% gsub("~", "", .) %>% gsub("^\\s*", "", .) %>% gsub("\\s*$", "", .)
for (gg in groupVarName) {
data[[gg]]  = data[[gg]] %>% gsub("\\.", ., replacement = "_")
universe.dt[[gg]]  = universe.dt[[gg]] %>% gsub("\\.", ., replacement = "_")
}
}
geneClusters = plyr::dlply(.data = data, formula(grouping.formula),
.fun = function(x) {
as.character(x[[genes.var]])
})
universeList = plyr::dlply(.data = universe.dt, formula(grouping.formula),
.fun = function(x) {
as.character(x[[universe.var]])
})
}
}
stopifnot(all(names(geneClusters) %in% names(universeList)))
clProf <- plyr::llply(names(geneClusters), .fun = function(i) {
geneCluster = geneClusters[[i]]
universe = universeList[[i]]
x = suppressMessages(fun(geneCluster, universe=universe, ...))
if (class(x) == "enrichResult" || class(x) == "groupGOResult") {
x= as.data.frame(x)
}
# browser()
if(nrow(x) > 0)
x$Cluster = i
x
})
clusters.levels = names(geneClusters)
clProf.df <- plyr::ldply(clProf, rbind)
if (nrow(clProf.df) == 0) {
stop("No enrichment found in any of gene cluster, please check your input...")
}
# clProf.df <- plyr::rename(clProf.df, c(.id = "Cluster"))
# clProf.df$Cluster = cluster.levels
clProf.df$Cluster = factor(clProf.df$Cluster, levels = clusters.levels)
if (is.data.frame(data) && grepl("+", grouping.formula)) {
# groupVarName <- strsplit(grouping.formula, split = "\\+") %>%
#     unlist %>% gsub("~", "", .) %>% gsub("^\\s*", "",
#                                          .) %>% gsub("\\s*$", "", .)
# browser()
groupVars <- sapply(as.character(clProf.df$Cluster),
strsplit, split = "\\.") %>% do.call(rbind, .)
for (i in seq_along(groupVarName)) {
clProf.df[, groupVarName[i]] <- groupVars[, i]
}
i <- which(colnames(clProf.df) %in% groupVarName)
j <- (1:ncol(clProf.df))[-c(1, i)]
clProf.df <- clProf.df[, c(1, i, j)]
}
new("compareClusterResult", compareClusterResult = clProf.df,
geneClusters = geneClusters, fun = fun_name, .call = match.call(expand.dots = TRUE))
}
formula_res_bulk <- compareCluster.unverselist(ENTREZID~up_or_down+type, data=bulk.combined.dt[P< 5E-2][!is.na(up_or_down)], fun="clusterProfiler::enrichKEGG", organism="hsa", pvalueCutoff=0.1, universe.dt=bulk.combined.dt, universe.var = "ENTREZID")
p1 = clusterProfiler::dotplot(formula_res, x=~type) + ggplot2::facet_grid(~up_or_down) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size=6,angle = 90))+
ggplot2::theme(axis.text.y = ggplot2::element_text(size=10))
# print(p1)
ggplot2::ggsave(filename = "~/p.bulk.pathway.resp.noresp.pdf",p1, width = 15, height = 10)
compareCluster.unverselist = function (geneClusters, fun = "enrichGO", data = "", universe.dt = NULL, universe.var=NULL,  ...)
{
# require(plyr)
fun_name <- fun
fun <- eval(parse(text = fun))
if (typeof(geneClusters) == "language") {
if (!is.data.frame(data)) {
stop("no data provided with formula for compareCluster")
}
else {
genes.var = all.vars(geneClusters)[1]
grouping.formula = gsub("^.*~", "~", as.character(as.expression(geneClusters)))
if (is.data.frame(data) && grepl("+", grouping.formula)) {
groupVarName <- strsplit(grouping.formula, split = "\\+") %>%
unlist %>% gsub("~", "", .) %>% gsub("^\\s*", "", .) %>% gsub("\\s*$", "", .)
for (gg in groupVarName) {
data[[gg]]  = data[[gg]] %>% gsub("\\.", ., replacement = "_")
universe.dt[[gg]]  = universe.dt[[gg]] %>% gsub("\\.", ., replacement = "_")
}
}
geneClusters = plyr::dlply(.data = data, formula(grouping.formula),
.fun = function(x) {
as.character(x[[genes.var]])
})
universeList = plyr::dlply(.data = universe.dt, formula(grouping.formula),
.fun = function(x) {
as.character(x[[universe.var]])
})
}
}
stopifnot(all(names(geneClusters) %in% names(universeList)))
clProf <- plyr::llply(names(geneClusters), .fun = function(i) {
geneCluster = geneClusters[[i]]
universe = universeList[[i]]
x = suppressMessages(fun(geneCluster, universe=universe, ...))
if (class(x) == "enrichResult" || class(x) == "groupGOResult") {
x= as.data.frame(x)
}
# browser()
if(nrow(x) > 0)
x$Cluster = i
x
})
clusters.levels = names(geneClusters)
clProf.df <- plyr::ldply(clProf, rbind)
if (nrow(clProf.df) == 0) {
stop("No enrichment found in any of gene cluster, please check your input...")
}
# clProf.df <- plyr::rename(clProf.df, c(.id = "Cluster"))
# clProf.df$Cluster = cluster.levels
clProf.df$Cluster = factor(clProf.df$Cluster, levels = clusters.levels)
if (is.data.frame(data) && grepl("+", grouping.formula)) {
# groupVarName <- strsplit(grouping.formula, split = "\\+") %>%
#     unlist %>% gsub("~", "", .) %>% gsub("^\\s*", "",
#                                          .) %>% gsub("\\s*$", "", .)
# browser()
groupVars <- sapply(as.character(clProf.df$Cluster),
strsplit, split = "\\.") %>% do.call(rbind, .)
for (i in seq_along(groupVarName)) {
clProf.df[, groupVarName[i]] <- groupVars[, i]
}
i <- which(colnames(clProf.df) %in% groupVarName)
j <- (1:ncol(clProf.df))[-c(1, i)]
clProf.df <- clProf.df[, c(1, i, j)]
}
new("compareClusterResult", compareClusterResult = clProf.df,
geneClusters = geneClusters, fun = fun_name, .call = match.call(expand.dots = TRUE))
}
debug(compareCluster.unverselist)
formula_res_bulk <- compareCluster.unverselist(ENTREZID~up_or_down+type, data=bulk.combined.dt[P< 5E-2][!is.na(up_or_down)], fun="clusterProfiler::enrichKEGG", organism="hsa", pvalueCutoff=0.1, universe.dt=bulk.combined.dt, universe.var = "ENTREZID")
head(data[[gg]])
head(data[[gg]])
head(universe.dt[[gg]])
unique(universe.dt[[gg]])
unique(universe.dt[[gg]])
undebug(compareCluster.unverselist)
c
formula_res_bulk <- compareCluster.unverselist(ENTREZID~up_or_down+type, data=bulk.combined.dt[P< 5E-2][!is.na(up_or_down)], fun="clusterProfiler::enrichKEGG", organism="hsa", pvalueCutoff=0.1, universe.dt=bulk.combined.dt, universe.var = "ENTREZID")
p1 = clusterProfiler::dotplot(formula_res, x=~type) + ggplot2::facet_grid(~up_or_down) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size=6,angle = 90))+
ggplot2::theme(axis.text.y = ggplot2::element_text(size=10))
# print(p1)
ggplot2::ggsave(filename = "~/p.bulk.pathway.resp.noresp.pdf",p1, width = 15, height = 10)
formula_res_combined = formula_res_bulk
formula_res_combined@compareClusterResult = cbind(formula_res_bulk@compareClusterResult, formula_res_scrna@compareClusterResult)
formula_res_combined@compareClusterResult = rbind(formula_res_bulk@compareClusterResult, formula_res_scrna@compareClusterResult)
formula_res_combined@compareClusterResult = c(formula_res_bulk@geneClusters, formula_res_scrna@geneClusters)
class(formula_res_bulk@geneClusters)
formula_res_combined@compareClusterResult = rbind(formula_res_bulk@compareClusterResult, formula_res_scrna@compareClusterResult)
formula_res_combined@geneClusters = c(formula_res_bulk@geneClusters, formula_res_scrna@geneClusters)
p1 = clusterProfiler::dotplot(formula_res_bulk, x=~type) + ggplot2::facet_grid(~up_or_down) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size=6,angle = 90))+
ggplot2::theme(axis.text.y = ggplot2::element_text(size=10))
# print(p1)
ggplot2::ggsave(filename = "~/p.bulk.pathway.resp.noresp.pdf",p1, width = 15, height = 10)
p1 = clusterProfiler::dotplot(formula_res_combined, x=~type) + ggplot2::facet_grid(~up_or_down) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size=6,angle = 90))+
ggplot2::theme(axis.text.y = ggplot2::element_text(size=10))
# print(p1)
ggplot2::ggsave(filename = "~/p.combined.pathway.resp.noresp.pdf",p1, width = 15, height = 10)
getwd()
cytokines = fread("/liulab/xmwang/oxphos_proj/loading_data/surface/cytokine.txt", header=F)
surface.genes = fread("/liulab/xmwang/oxphos_proj/loading_data/surface/ExpressionLigRec.txt", header=T)
cytokines = intersect(cytokines$V2, all.genes)
cytokine.deg.scrna = diff.exp.dt[gene %in% cytokines]
cytokine.deg.scrna
cytokine.deg.scrna = diff.exp.dt[which(gene %in% cytokines)]
cytokine.deg.scrna
cytokine.deg.scrna[gene%in% "TNFRSF18"]
aa = cytokine.deg.scrna[gene%in% "TNFRSF18"][order(P)]
aa
bb= cytokine.deg.scrna[type %in% "Endothelial"]
bb
bb[logFC>0]
bb[logFC>0][order(P)]
# aa = cytokine.deg.scrna[gene%in% "TNFRSF18"][order(P)]
# bb= cytokine.deg.scrna[type %in% "Endothelial"]
length(unique(cytokine.deg.scrna$gene))
cytokine.deg.scrna = diff.exp.dt[which(gene %in% cytokines)] %>%
.[,estimate:=ifelse(P<0.1, logFC,NA)] %>%
.[,estimate:=sign(logFC)*min(2,absc(logFC))]
cytokine.deg.scrna = diff.exp.dt[which(gene %in% cytokines)] %>%
.[,estimate:=ifelse(P<0.1, logFC,NA)] %>%
.[,estimate:=sign(logFC)*min(2,abs(logFC))]
head(predictor.dt)
?xtab
??xtab
??xtabs
?cast
# aa = cytokine.deg.scrna[gene%in% "TNFRSF18"][order(P)]
# bb= cytokine.deg.scrna[type %in% "Endothelial"]
# length(unique(cytokine.deg.scrna$gene))
out = reshape2::cast(cytokine.deg.scrna, gene~type, value.var="estimate" )
# aa = cytokine.deg.scrna[gene%in% "TNFRSF18"][order(P)]
# bb= cytokine.deg.scrna[type %in% "Endothelial"]
# length(unique(cytokine.deg.scrna$gene))
out = cast(cytokine.deg.scrna, gene~type, value.var="estimate" )
# aa = cytokine.deg.scrna[gene%in% "TNFRSF18"][order(P)]
# bb= cytokine.deg.scrna[type %in% "Endothelial"]
# length(unique(cytokine.deg.scrna$gene))
out = dcast(cytokine.deg.scrna, gene~type, value.var="estimate" )
dim(out)
head(out)
head(cytokine.deg.scrna)
cytokine.deg.scrna = diff.exp.dt[which(gene %in% cytokines)] %>%
.[,estimate:=ifelse(P<0.1, logFC,NA)]
cytokine.deg.scrna
head(cytokine.deg.scrna)
cytokine.deg.scrna = diff.exp.dt[which(gene %in% cytokines)] %>%
.[,estimate:=ifelse(P<0.1, logFC,NA)] %>%
.[,estimate:=sign(logFC)*sapply(logFC, function(tt) min(2,abs(ttt)))]
cytokine.deg.scrna = diff.exp.dt[which(gene %in% cytokines)] %>%
.[,estimate:=ifelse(P<0.1, logFC,NA)] %>%
.[,estimate:=sign(logFC)*sapply(logFC, function(tt) min(2,abs(tt)))]
head(cytokine.deg.scrna)
out
# aa = cytokine.deg.scrna[gene%in% "TNFRSF18"][order(P)]
# bb= cytokine.deg.scrna[type %in% "Endothelial"]
# length(unique(cytokine.deg.scrna$gene))
out = dcast(cytokine.deg.scrna, gene~type, value.var="estimate" )
out
?dcast
out1 = out[,-1,with=F]%>%
as.matrix(.) %>%
rownames(.,out$gene)
out1 = out[,-1,with=F]%>%
as.matrix(.) %>%
rownames(.,out$gene)
out1 = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene)
class(out1)
head(out1)
pheatmap(out1, cluster_cols = F,fontsize_col = 5, filename="~/Rplot2.pdf", width = 10, height = 10)
library(pheatmap)
pheatmap(out1, cluster_cols = F,fontsize_col = 5, filename="~/Rplot2.pdf", width = 10, height = 10)
out1 = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene) %>%
out1 = out1[complete.cases(out1),complete.cases(t(out1))]
out1 = out1[complete.cases(out1),complete.cases(t(out1))]
library(pheatmap)
pheatmap(out1, cluster_cols = T,fontsize_col = 5, filename="~/Rplot2.pdf", width = 10, height = 10)
dim(out1)
# aa = cytokine.deg.scrna[gene%in% "TNFRSF18"][order(P)]
# bb= cytokine.deg.scrna[type %in% "Endothelial"]
# length(unique(cytokine.deg.scrna$gene))
out = dcast(cytokine.deg.scrna, gene~type, value.var="estimate" )
out1 = out1[complete.cases(out1),complete.cases(t(out1))]
dim(out1)
out1 = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene) %>%
.[complete.cases(.),complete.cases(t(.))]
out1
dim(out1)
# aa = cytokine.deg.scrna[gene%in% "TNFRSF18"][order(P)]
# bb= cytokine.deg.scrna[type %in% "Endothelial"]
# length(unique(cytokine.deg.scrna$gene))
out = dcast(cytokine.deg.scrna, gene~type, value.var="estimate" )
out1 = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene) %>%
.[complete.cases(.),complete.cases(t(.))]
dim(out1)
out1 = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene)
out1
complete.cases(out1)
complete.cases(t(out1))
out1 = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene) %>%
.[rowMeans(is.na(.)) <1,colMeans(is.na(.)) <1]
dim(out1)
dim(out)
pheatmap(out1, cluster_cols = T,fontsize_col = 5, filename="~/Rplot2.pdf", width = 10, height = 10)
pheatmap(out1, cluster_cols = T,fontsize_col = 5, fontsize_row = 5, filename="~/cytokine.deg.scrna.pdf", width = 15, height = 10)
rownames(out1)
cytokine.deg.bulk = formula_res_combined[which(gene %in% rownames(out1))] %>%
.[,estimate:=ifelse(P<0.1, logFC,NA)] %>%
.[,estimate:=sign(logFC)*sapply(logFC, function(tt) min(2,abs(tt)))]
formula_res_combined
cytokines = fread("/liulab/xmwang/oxphos_proj/loading_data/surface/cytokine.txt", header=F)
surface.genes = fread("/liulab/xmwang/oxphos_proj/loading_data/surface/ExpressionLigRec.txt", header=T)
cytokines = intersect(cytokines$V2, all.genes)
cytokine.deg.scrna = diff.exp.dt[which(gene %in% cytokines)] %>%
.[,estimate:=ifelse(P<0.05, logFC,NA)] %>%
.[,estimate:=sign(logFC)*sapply(logFC, function(tt) min(2,abs(tt)))]
# aa = cytokine.deg.scrna[gene%in% "TNFRSF18"][order(P)]
# bb= cytokine.deg.scrna[type %in% "Endothelial"]
# length(unique(cytokine.deg.scrna$gene))
out = dcast(cytokine.deg.scrna, gene~type, value.var="estimate" )
out1.scrna = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene) %>%
.[rowMeans(is.na(.)) <1,colMeans(is.na(.)) <1]
library(pheatmap)
pheatmap(out1.scrna, cluster_cols = T,fontsize_col = 5, fontsize_row = 5, filename="~/cytokine.deg.scrna.pdf", width = 15, height = 10)
cytokines = fread("/liulab/xmwang/oxphos_proj/loading_data/surface/cytokine.txt", header=F)
surface.genes = fread("/liulab/xmwang/oxphos_proj/loading_data/surface/ExpressionLigRec.txt", header=T)
cytokines = intersect(cytokines$V2, all.genes)
cytokine.deg.scrna = diff.exp.dt[which(gene %in% cytokines)] %>%
.[,estimate:=ifelse(P<0.01, logFC,NA)] %>%
.[,estimate:=sign(logFC)*sapply(logFC, function(tt) min(2,abs(tt)))]
# aa = cytokine.deg.scrna[gene%in% "TNFRSF18"][order(P)]
# bb= cytokine.deg.scrna[type %in% "Endothelial"]
# length(unique(cytokine.deg.scrna$gene))
out = dcast(cytokine.deg.scrna, gene~type, value.var="estimate" )
out1.scrna = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene) %>%
.[rowMeans(is.na(.)) <1,colMeans(is.na(.)) <1]
library(pheatmap)
pheatmap(out1.scrna, cluster_cols = T,fontsize_col = 5, fontsize_row = 5, filename="~/cytokine.deg.scrna.pdf", width = 15, height = 10)
cytokines = fread("/liulab/xmwang/oxphos_proj/loading_data/surface/cytokine.txt", header=F)
surface.genes = fread("/liulab/xmwang/oxphos_proj/loading_data/surface/ExpressionLigRec.txt", header=T)
cytokines = intersect(cytokines$V2, all.genes)
cytokine.deg.scrna = diff.exp.dt[which(gene %in% cytokines)] %>%
.[,estimate:=ifelse(P<0.005, logFC,NA)] %>%
.[,estimate:=sign(logFC)*sapply(logFC, function(tt) min(2,abs(tt)))]
# aa = cytokine.deg.scrna[gene%in% "TNFRSF18"][order(P)]
# bb= cytokine.deg.scrna[type %in% "Endothelial"]
# length(unique(cytokine.deg.scrna$gene))
out = dcast(cytokine.deg.scrna, gene~type, value.var="estimate" )
out1.scrna = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene) %>%
.[rowMeans(is.na(.)) <1,colMeans(is.na(.)) <1]
library(pheatmap)
pheatmap(out1.scrna, cluster_cols = T,fontsize_col = 5, fontsize_row = 5, filename="~/cytokine.deg.scrna.pdf", width = 15, height = 10)
head(bulk.combined.dt)
cytokine.deg.bulk = bulk.combined.dt[which(gene %in% rownames(out1))] %>%
.[,estimate:=ifelse(P<0.05, logFC,NA)] %>%
.[,estimate:=sign(logFC)*sapply(logFC, function(tt) min(2,abs(tt)))]
cytokine.deg.bulk = bulk.combined.dt[which(gene %in% rownames(out1))] %>%
.[,estimate:=ifelse(P<0.01, ifelse(up_or_down=="upregulated",1,0), NA)]
out = dcast(cytokine.deg.bulk, gene~type, value.var="estimate" )
out1.bulk = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene) %>%
.[,colMeans(is.na(.)) <1]
library(pheatmap)
pheatmap(out1.bulk, cluster_cols = T,fontsize_col = 5, fontsize_row = 5, filename="~/cytokine.deg.bulk.pdf", width = 15, height = 10)
out1.bulk = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene) %>%
.[rowMeans(is.na(.)) < 1 ,colMeans(is.na(.)) <1]
library(pheatmap)
pheatmap(out1.bulk, cluster_cols = T,fontsize_col = 5, fontsize_row = 5, filename="~/cytokine.deg.bulk.pdf", width = 15, height = 10)
cytokine.deg.bulk = bulk.combined.dt[which(gene %in% rownames(out1))] %>%
.[,estimate:=ifelse(P<0.01, ifelse(up_or_down=="upregulated",1,-1), 0)]
out = dcast(cytokine.deg.bulk, gene~type, value.var="estimate" )
out1.bulk = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene) %>%
.[rowMeans(is.na(.)) < 1 ,colMeans(is.na(.)) <1]
library(pheatmap)
pheatmap(out1.bulk, cluster_cols = T,fontsize_col = 5, fontsize_row = 5, filename="~/cytokine.deg.bulk.pdf", width = 15, height = 10)
p = pheatmap(out1.scrna, cluster_cols = T,fontsize_col = 5, fontsize_row = 5, filename="~/cytokine.deg.scrna.pdf", width = 15, height = 10)
class(p)
p$tree_row
p$tree_col
p$tree_col$order
p$tree_row$order
p.scrna = pheatmap(out1.scrna, cluster_cols = T,fontsize_col = 5, fontsize_row = 5, filename="~/cytokine.deg.scrna.pdf", width = 15, height = 10)
cytokine.deg.bulk = bulk.combined.dt[which(gene %in% rownames(out1))] %>%
.[,estimate:=ifelse(P<0.05, ifelse(up_or_down=="upregulated",1,-1), 0)]
out = dcast(cytokine.deg.bulk, gene~type, value.var="estimate" )
out1.bulk = out[,-1,with=F]%>%
as.matrix(.,rownames=out$gene) %>%
.[p.scrna$tree_row$order,colMeans(is.na(.)) <1]
library(pheatmap)
pheatmap(out1.bulk, cluster_cols = T, cluster_row=F, fontsize_col = 5, fontsize_row = 5, filename="~/cytokine.deg.bulk.pdf", width = 15, height = 10)
getz = readRDS("/liulab/asahu/data/ssgsea/xiaoman/getz/SKCM_ICB_SeuratObj.rds")
dim(getz)
library(Seurat)
dim(getz)
getz
getz@meta.data
dim(getz@meta.data)
head(getz@meta.data)
table(getz@meta.data$assign.ident.2)
gorgan = readRDS("~/liulab_home/data/single_cell/GSE139555/GSE139555_all_integrated.rds.gz")
devtools::install_github("kudusch/ktools")
gorgan = ktools::readRDS.gz("~/liulab_home/data/single_cell/GSE139555/GSE139555_all_integrated.rds.gz")
head(getz@raw.data)
getz@raw.data[1:10,1:10]
getz@data[1:10,1:10]
gorgan = readRDS.gz("~/liulab_home/data/single_cell/GSE139555/GSE139555_all_integrated.rds")
gorgan = readRDS("~/liulab_home/data/single_cell/GSE139555/GSE139555_all_integrated.rds")
class(gorgan)
dim(gorgan)
head(colnames(gorgan))
head(rownames(gorgan))
rm(grogan)
gc()
getz.new = readRDS("/liulab/asahu/data/single_cell/GSE120575/GSE120575_human_aPD1aCTLA4_res.rds")
dim(getz.new)
getz.new
class(getz.new)
length(getz.new)
head(getz.new$RNA)
head(getz.new$genes)
dim(getz.new$RNA)
getz.new$RNA[1:10,1;10]
getz.new$RNA[1:10,1:10]
head(getz.new$RNA@meta.data)
table(getz.new$RNA@meta.data$assign.CIBERSORT)
table(getz.new$RNA@meta.data$assign.idet)
table(getz.new$RNA@meta.data$assign.ident)
xx = getz.new$RNA@meta.data
head(xx)
getz = get.new$RNA
getz = getz.new$RNA
rm(getz.new)
save.image()
