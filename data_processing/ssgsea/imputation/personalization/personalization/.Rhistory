quantile(log2fcNormalMixFit$locfdr)
quantile(log2fcCRISPhieRmixFit$locfdr)
head(log2fcNormalMixScores, 20)
hist(log2fcNormalMixScores$locfdr, breaks = 50, col = "grey", xlab = "CRISPhieRmix locfdr")
hist(out[[1]]$locfdr, breaks = 50, col = "grey", xlab = "CRISPhieRmix locfdr")
hist(out[[1]]$FDR, breaks = 50, col = "grey", xlab = "CRISPhieRmix locfdr")
out[[1]]$FDR
hist(as.numeric(out[[1]]$locfdr), breaks = 50, col = "grey", xlab = "CRISPhieRmix locfdr")
hist(as.numeric(out[[1]]$FDR), breaks = 50, col = "grey", xlab = "CRISPhieRmix locfdr")
use.CRISPhieRmixFit = function(crispr.df){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-6, sigma=2)
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
}
out = mclapply(list_all, use.CRISPhieRmixFit, mc.cores = 32)
temp1 = data.table(do.call(rbind, lapply(out, function(tt) tt[grep("ESRRA",genes
,ignore.case=T)])))
temp1$screen = names(list_all)
esrra.lof = temp1
esrra.lof
use.CRISPhieRmixFit = function(crispr.df){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5.5, sigma=1.5)
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
}
out = mclapply(list_all, use.CRISPhieRmixFit, mc.cores = 32)
temp1 = data.table(do.call(rbind, lapply(out, function(tt) tt[grep("ESRRA",genes
,ignore.case=T)])))
temp1$screen = names(list_all)
esrra.lof = temp1
esrra.lof
use.CRISPhieRmixFit = function(crispr.df){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1.5)
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
}
out = mclapply(list_all, use.CRISPhieRmixFit, mc.cores = 32)
temp1 = data.table(do.call(rbind, lapply(out, function(tt) tt[grep("ESRRA",genes
,ignore.case=T)])))
temp1$screen = names(list_all)
esrra.lof = temp1
esrra.lof
use.CRISPhieRmixFit = function(crispr.df){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=.9)
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
}
out = mclapply(list_all, use.CRISPhieRmixFit, mc.cores = 32)
temp1 = data.table(do.call(rbind, lapply(out, function(tt) tt[grep("ESRRA",genes
,ignore.case=T)])))
temp1$screen = names(list_all)
esrra.lof = temp1
esrra.lof
quantile(1:10, .3)
negCtrl = crispr.df$LFC[sample( which(crispr.df$LFC > quantile(crispr.df$LFC, 0.25)), 100)]
use.CRISPhieRmixFit = function(crispr.df, use.negctrl=T){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
if(use.negctrl){
negCtrl = crispr.df$LFC[sample( which(crispr.df$LFC > quantile(crispr.df$LFC, 0.25)), 100)]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
}else{
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
}
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
}
out = mclapply(list_all, use.CRISPhieRmixFit, mc.cores = 32)
use.CRISPhieRmixFit(list_all[[1]])
use.CRISPhieRmixFit = function(crispr.df, use.negctrl=T){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
if(use.negctrl){
negCtrl = crispr.df$LFC[sample( which(crispr.df$LFC > quantile(crispr.df$LFC, 0.25)), 100)]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-5, sigma=1)
}else{
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
}
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
}
out = mclapply(list_all, use.CRISPhieRmixFit, mc.cores = 32)
temp1 = data.table(do.call(rbind, lapply(out, function(tt) tt[grep("ESRRA",genes
,ignore.case=T)])))
temp1$screen = names(list_all)
esrra.lof = temp1
esrra.lof
use.CRISPhieRmixFit = function(crispr.df, use.negctrl=T){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
if(use.negctrl){
negCtrl = crispr.df$LFC[sample( which(crispr.df$LFC >= quantile(crispr.df$LFC, 0.5)), 100)]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-5, sigma=1)
}else{
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
}
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
}
out = mclapply(list_all, use.CRISPhieRmixFit, mc.cores = 32)
temp1 = data.table(do.call(rbind, lapply(out, function(tt) tt[grep("ESRRA",genes
,ignore.case=T)])))
temp1$screen = names(list_all)
esrra.lof = temp1
esrra.lof
use.CRISPhieRmixFit = function(crispr.df, use.negctrl=T){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
if(use.negctrl){
negCtrl = crispr.df$LFC[sample( which(crispr.df$LFC >= quantile(crispr.df$LFC, 0.5)), 100)]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-5, sigma=1)
}else{
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
}
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
}
out = mclapply(list_all, use.CRISPhieRmixFit, use.negctrl=F, mc.cores = 32)
out = mclapply(list_all, use.CRISPhieRmixFit, use.negctrl=F, mc.cores = 32)
temp1 = data.table(do.call(rbind, lapply(out, function(tt) tt[grep("ESRRA",genes
,ignore.case=T)])))
temp1$screen = names(list_all)
esrra.lof = temp1
T==1
T==2
T==0
use.CRISPhieRmixFit = function(crispr.df, use.negctrl=2){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
if(use.negctrl==1){
negCtrl = crispr.df$LFC[sample( which(crispr.df$LFC >= quantile(crispr.df$LFC, 0.25)), 100)]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-5, sigma=1)
}else if(use.negctrl==2) {
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))[locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .5)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene==null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-5, sigma=1)
}else{
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
}
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
}
use.CRISPhieRmixFit = function(crispr.df, use.negctrl=2){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
if(use.negctrl==1){
negCtrl = crispr.df$LFC[sample( which(crispr.df$LFC >= quantile(crispr.df$LFC, 0.25)), 100)]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-5, sigma=1)
}else if(use.negctrl==2) {
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))[locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .5)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene==null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-5, sigma=1)
}else{
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
}
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
}
out = mclapply(list_all, use.CRISPhieRmixFit, use.negctrl=2, mc.cores = 32)
out[[1]]
crispr.df[1]
crispr.dr[[1]]
crispr.df[[1]]
crispr.df =list_all[[1]]
head(crispr.df)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))[locfdr<1]
null.dist
null.genes = sample(null.dist[locfdr > quantile(locfdr, .5)]$genes,100)
null.dist$locfdr
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.dist
null.genes = sample(null.dist[locfdr > quantile(locfdr, .5)]$genes,100)
null.genes
use.CRISPhieRmixFit = function(crispr.df, use.negctrl=2){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
if(use.negctrl==1){
negCtrl = crispr.df$LFC[sample( which(crispr.df$LFC >= quantile(crispr.df$LFC, 0.25)), 100)]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-5, sigma=1)
}else if(use.negctrl==2) {
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .5)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene==null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-5, sigma=1)
}else{
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
}
data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
}
null.genes = sample(null.dist[locfdr > quantile(locfdr, .5)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene==null.genes,]$LFC
crispr.df[crispr.df$Gene==null.genes,]
null.genes
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .5)]$genes,100)
null.genes
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
negCtrl
summary(negCtrl)
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-5, sigma=1)
xx = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
xx
xx$FDR < 0.01
sum(xx$FDR < 0.01)
null.genes = sample(null.dist[locfdr > quantile(locfdr, .25)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
null.genes = sample(null.dist[locfdr > quantile(locfdr, .75)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-5, sigma=1)
xx =  data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
xx
sum(xx$FDR < 0.01)
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .5)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-2, sigma=1)
xx = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
xx
head(xx)
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .35)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-2, sigma=1)
xx = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
head(xx)
log2fcCRISPhieRmixFit.first = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit.first[1:4]))
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .35)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-2, sigma=1)
log2fcCRISPhieRmixFit.first = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=-5, sigma=1)
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit.first[1:4]))
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .35)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-2, sigma=1)
xx = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
head(xx)
dim(crispr.df)
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit.first[1:4]))
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .25)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-2, sigma=1)    null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit.first[1:4]))
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .25)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-2, sigma=1)
head(xx)
xx = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
xx
}
head(xx)
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit.first[1:4]))
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .7)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-2, sigma=1)
xx = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
head(xx)
head(xx)
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit.first[1:4]))
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .75)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-2, sigma=1)
xx = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
head(xx)
sum(xx$FDR < 0.01)
seq(-1,-5)
hyper.search = expand.grid(mus=seq(-1,-5), sigmas=sigmas(.5,2,.5))
seq_along(hyper.search)
hyper.search = expand.grid(mus=seq(-1,-5), sigmas=sigmas(.5,2,.5))
hyper.search = expand.grid(mus=seq(-1,-5), sigmas=seq(.5,2,.5))
seq_along(hyper.search)
seq(10)
temp.fun <- function(mu, sigma) {
out = mclapply(list_all, use.CRISPhieRmixFit, use.negctrl=-1, mc.cores = 32)
temp1 = data.table(do.call(rbind, lapply(out, function(tt) tt[grep("ESRRA",genes
,ignore.case=T)])))
temp1$screen = names(list_all)
temp1
}
hyper.search = expand.grid(mus=seq(-1,-5), sigmas=seq(.5,2,.5))
hyper.out = mclapply(seq(nrow(hyper.search)), function(ii) temp.fun(hyper.search$mus[ii], hyper.search$mus[ii]), mc.cores = 5)
hyper.out[[1]]
pos.screen = rep(1, 8)
pos.screen[c(4,8)] = 0
hyper.eval = sapply(hyper.out, function(hh) sum((hh$locfdr < 0.01) == pos.screen ))
hyper.eval
length(hyper.eval)
dim(expand.grid)
dim(hyper.search)
pos.screen = rep(1, 8)
pos.screen[c(4,7,8)] = 0
hyper.eval = sapply(hyper.out, function(hh) sum((hh$locfdr < 0.01) == pos.screen ))
hyper.eval
hyper.out[[20]]
hyper.out[[8]]
hyper.out$eval = sapply(hyper.out, function(hh) sum((hh$locfdr < 0.01) == pos.screen ))
hyper.out
hyper.out$eval = NULL
hyper.search$eval = sapply(hyper.out, function(hh) sum((hh$locfdr < 0.01) == pos.screen ))
yper.search
hyper.search
hyper.search$eval = sapply(hyper.out, function(hh) sum((hh$locfdr < 0.01) == pos.screen ))
hyper.search$pos = sapply(hyper.out, function(hh) sum(hh$locfdr < 0.01) )
hyper.search
hyper.out[[20]]
hyper.out[[20]]$locfdr < 0.01
hyper.out[[20]]$locfdr
hyper.search$eval = sapply(hyper.out, function(hh) sum((as.numeric(hh$locfdr) < 0.01) == pos.screen ))
hyper.search$pos = sapply(hyper.out, function(hh) sum(as.numeric(hh$locfdr) < 0.01) )
hyper.search
hyper.search = expand.grid(mus=seq(-1,-6,0.5), sigmas=seq(.5,2,.25))
hyper.search = expand.grid(mus=seq(-1,-6,-0.5), sigmas=seq(.5,2,.25))
hyper.out = mclapply(seq(nrow(hyper.search)), function(ii) temp.fun(hyper.search$mus[ii], hyper.search$mus[ii]), mc.cores = 5)
pos.screen = rep(1, 8)
pos.screen[c(4,7,8)] = 0
hyper.search$eval = sapply(hyper.out, function(hh) sum((as.numeric(hh$locfdr) < 0.01) == pos.screen ))
hyper.search$pos = sapply(hyper.out, function(hh) sum(as.numeric(hh$locfdr) < 0.01) )
hyper.search
pos.screen = rep(1, 8)
pos.screen[c(4,6,8)] = 0
hyper.search$eval = sapply(hyper.out, function(hh) sum((as.numeric(hh$locfdr) < 0.01) == pos.screen ))
hyper.search$pos = sapply(hyper.out, function(hh) sum(as.numeric(hh$locfdr) < 0.01) )
hyper.search
hyper.out[[62]]
dim(hyper.search)
hyper.out[[77]]
pos.screen = rep(1, 8)
pos.screen[c(3,4,6,8)] = 0
hyper.search$eval = sapply(hyper.out, function(hh) sum((as.numeric(hh$locfdr) < 0.01) == pos.screen ))
hyper.search$pos = sapply(hyper.out, function(hh) sum(as.numeric(hh$locfdr) < 0.01) )
hyper.search
hyper.out[[10]]
esrra.lof = hyper.out[[10]]
gene_list_crispr = readRDS("/homes6/xmwang/OXPHOS/Figures/Figure_time_stage/Figure_72/gene_list_crispr.rds")
names(gene_list_crispr)
curr.list = gene_list_crispr[[1]]
curr.list
esrra.lof
mu = -5.5; sigma = 0.5
estimate.list <- function(curr.list) {
curr.list = toupper(curr.list)
mclapply(list_all, function(ll) {
df.curr = ll
ll$Gene = toupper(ll$Gene)
df.pathway = ll[ll$Gene %in% curr.list,]
df.pathway$Gene = "pathway"
df.curr = rbind(ll, df.pathway)
curr.out = use.CRISPhieRmixFit(df.curr, use.negctrl=-1, mu = mu, sigma =sigma)
curr.out[genes %in% c(curr.list, "pathway")]
}
,
mc.cores = 32)
}
curr.list
xx =mclapply(list_all, function(ll) {
df.curr = ll
ll$Gene = toupper(ll$Gene)
df.pathway = ll[ll$Gene %in% curr.list,]
df.pathway$Gene = "pathway"
df.curr = rbind(ll, df.pathway)
curr.out = use.CRISPhieRmixFit(df.curr, use.negctrl=-1, mu = mu, sigma =sigma)
curr.out[genes %in% c(curr.list, "pathway")]
}
,
mc.cores = 32)
ll = list_all[[1]]
ll$Gene = toupper(ll$Gene)
ll$Gene = toupper(ll$Gene)
df.pathway = ll[ll$Gene %in% curr.list,]
df.pathway
dim(df.pathway)
df.pathway$Gene = "pathway"
df.curr = rbind(ll, df.pathway)
dim(df.curr)
curr.out = use.CRISPhieRmixFit(df.curr, use.negctrl=-1, mu = mu, sigma =sigma)
use.CRISPhieRmixFit = function(crispr.df, use.negctrl=2, mu = -2, sigma =1){
require(CRISPhieRmix)
crispr.df = crispr.df[!is.na(crispr.df$LFC),]
if(use.negctrl==1){
negCtrl = crispr.df$LFC[sample( which(crispr.df$LFC >= quantile(crispr.df$LFC, 0.25)), 100)]
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=mu, sigma=sigma)
}else if(use.negctrl==2) {
log2fcCRISPhieRmixFit.first = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=mu, sigma=sigma)
null.dist = data.table(do.call(cbind, log2fcCRISPhieRmixFit.first[1:4]))
null.dist[,locfdr:=as.numeric(locfdr)][locfdr<1]
null.genes = sample(null.dist[locfdr > quantile(locfdr, .75)]$genes,100)
negCtrl = crispr.df[crispr.df$Gene %in% null.genes,]$LFC
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC,negCtrl =negCtrl, geneIds = crispr.df$Gene,  nMesh = 100, PLOT = F, mu=-2, sigma=1)
}else{
log2fcCRISPhieRmixFit = CRISPhieRmix(crispr.df$LFC, geneIds = crispr.df$Gene, negCtrl = NULL, nMesh = 100, PLOT = F, mu=mu, sigma=sigma)
}
xx = data.table(do.call(cbind, log2fcCRISPhieRmixFit[1:4]))
xx
}
curr.out = use.CRISPhieRmixFit(df.curr, use.negctrl=-1, mu = mu, sigma =sigma)
dim(curr.out )
xx = curr.out[genes %in% c(curr.list, "pathway")]
dim(xx)
curr.out
estimate.list <- function(curr.list) {
curr.list = toupper(curr.list)
mclapply(list_all, function(ll) {
ll$Gene = toupper(ll$Gene)
df.pathway = ll[ll$Gene %in% curr.list,]
df.pathway$Gene = "pathway"
df.curr = rbind(ll, df.pathway)
curr.out = use.CRISPhieRmixFit(df.curr, use.negctrl=-1, mu = mu, sigma =sigma)
curr.out[genes %in% c(curr.list, "pathway")]
}
,
mc.cores = 32)
}
genes_list_crispr_analysis = mclapply(gene_list_crispr, estimate.list, mc.cores=5)
genes_list_crispr_analysis[[1]]
genes_list_crispr_analysis[[1]][[1]]
curr.out
xw=v
xw= mclapply(list_all, function(ll) {
ll$Gene = toupper(ll$Gene)
df.pathway = ll[ll$Gene %in% curr.list,]
df.pathway$Gene = "pathway"
df.curr = rbind(ll, df.pathway)
curr.out = use.CRISPhieRmixFit(df.curr, use.negctrl=-1, mu = mu, sigma =sigma)
curr.out[genes %in% c(curr.list, "pathway")]
}
,
mc.cores = 32)
xw[[1]]
curr.out
curr.out[genes=="pathway"]
df.curr
tail(df.curr)
wilcox.test(df.pathway$LFC, ll$LFC)
summary(df.pathway$LFC)
summary(ll$LFC)
t.test(df.pathway$LFC, ll$LFC)
df.curr = rbind(ll, df.pathway[1:100])
df.curr = rbind(ll, df.pathway[1:100,])
curr.out = use.CRISPhieRmixFit(df.curr, use.negctrl=-1, mu = mu, sigma =sigma)
curr.out
curr.out[genes %in% "pathways"]
df.curr
tail(df.curr)
curr.out[genes %in% "pathway"]
df.curr = rbind(ll, df.pathway[1:200,])
curr.out = use.CRISPhieRmixFit(df.curr, use.negctrl=-1, mu = mu, sigma =sigma)
curr.out
curr.out[genes %in% "pathway"]
dim(df.pathway)
df.curr = rbind(ll, df.pathway)
curr.out = use.CRISPhieRmixFit(df.curr, use.negctrl=-1, mu = mu, sigma =sigma)
curr.out
curr.out[genes %in% "pathway"]
curr.out
(wilcox.test(df.pathway$LFC, ll$LFC))$p.value
genes_list_crispr_wilcox = mclapply(gene_list_crispr, estimate.wilcox.list, mc.cores=5)
estimate.wilcox.list <- function(curr.list) {
curr.list = toupper(curr.list)
mclapply(list_all, function(ll) {
ll$Gene = toupper(ll$Gene)
df.pathway = ll[ll$Gene %in% curr.list,]
(wilcox.test(df.pathway$LFC, ll$LFC))$p.value
}
,
mc.cores = 32)
}
genes_list_crispr_wilcox = mclapply(gene_list_crispr, estimate.wilcox.list, mc.cores=5)
genes_list_crispr_wilcox
genes_list_crispr_dt = do.call(rbind, genes_list_crispr_wilcox)
genes_list_crispr_dt
genes_list_crispr_dt = t(do.call(rbind, genes_list_crispr_wilcox))
genes_list_crispr_dt
genes_list_crispr_dt
print(genes_list_crispr_dt)
esrra.lof
crispr.output = list(esrra=esrra.lof, pathway=genes_list_crispr_dt)
save(file="crispr.output.RData", crispr.output)
pwd
pwd()
getwd()
save(file="/homes6/asahu/project/oxphos/crispr.output.RData", crispr.output)
mito_down_upgene = c(gene_list_crispr$mito_down, gene_list_crispr$Upgene)
estimate.wilcox.list <- function(curr.list, use.abs=F) {
curr.list = toupper(curr.list)
mclapply(list_all, function(ll) {
ll$Gene = toupper(ll$Gene)
df.pathway = ll[ll$Gene %in% curr.list,]
ifelse(use.abs,
(wilcox.test(abs(df.pathway$LFC), abs(ll$LFC)))$p.value,
(wilcox.test(df.pathway$LFC, ll$LFC))$p.value)
}
,
mc.cores = 32)
}
mito_down_upgene = estimate.wilcox.list(mito_down_upgene, use.abs = T)
mito_down_upgene
